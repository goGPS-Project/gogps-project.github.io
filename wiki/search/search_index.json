{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"goGPS 1.0 Open Edition Welcome to the goGPS wiki pages, here we will try to write useful information for users and developers. goGPS is a software created for processing GNSS raw data. It was originally written specifically to work with GPS single-frequency low-cost receivers but now it can fully exploit multi-constellation , multi-frequency , multi-tracking observations. goGPS implements multiple algorithms to analyze the data, and at the moment these include two main Least Squares (LS) engines: one working on combination of observables (e.g. iono-free observations) and one able to use all the frequencies and trackings logged without performing any combinations (ionospheric delay are parameters of the normal equations). The combined and uncombined engines can both compute Precise Point Positioning (PPP) solutions and Network adjustments (NET). Note: At the moment the software is focused on the processing of permanent stations (geodetic or low-cost) but it does not yet include the possibility to analyze moving receivers. Index of contents Introduction A bit of history About Installation Requirements Install procedure goGPS directories Execution Settings Index of contents Menu Sidebar Tabs Advanced Resources Commands Data Sources Receiver Info Pre-Processing Processing Parametrization PPP Parametrization Network Atmosphere Bottom Bar Command language Index of contents Receiver data organization Minimal script PUSHOUT How to select sessions How to select receivers Main commands LOAD PREPRO PPP NET Looping on receivers Parallel execution PINIT PKILL PAR Plots and export SHOW EXPORT Validation VALIDATE Ionospheric interpolation SEID SID REMIONO Multipath management MPEST Other Commands RENAME EMPTY EMPTYWORK EMPTYOUT AZEL BASICPP CODEPP OUTDET FIXPOS KEEP SYNC REMSAT REMOBS REMTMP How to create a new project Coding goGPS For a bit old presentation on the goGPS coding have a look at this presentation: Coding goGPS","title":"goGPS 1.0 Open Edition"},{"location":"#gogps-10-open-edition","text":"Welcome to the goGPS wiki pages, here we will try to write useful information for users and developers. goGPS is a software created for processing GNSS raw data. It was originally written specifically to work with GPS single-frequency low-cost receivers but now it can fully exploit multi-constellation , multi-frequency , multi-tracking observations. goGPS implements multiple algorithms to analyze the data, and at the moment these include two main Least Squares (LS) engines: one working on combination of observables (e.g. iono-free observations) and one able to use all the frequencies and trackings logged without performing any combinations (ionospheric delay are parameters of the normal equations). The combined and uncombined engines can both compute Precise Point Positioning (PPP) solutions and Network adjustments (NET). Note: At the moment the software is focused on the processing of permanent stations (geodetic or low-cost) but it does not yet include the possibility to analyze moving receivers.","title":"goGPS 1.0 Open Edition"},{"location":"#index-of-contents","text":"Introduction A bit of history About Installation Requirements Install procedure goGPS directories Execution Settings Index of contents Menu Sidebar Tabs Advanced Resources Commands Data Sources Receiver Info Pre-Processing Processing Parametrization PPP Parametrization Network Atmosphere Bottom Bar Command language Index of contents Receiver data organization Minimal script PUSHOUT How to select sessions How to select receivers Main commands LOAD PREPRO PPP NET Looping on receivers Parallel execution PINIT PKILL PAR Plots and export SHOW EXPORT Validation VALIDATE Ionospheric interpolation SEID SID REMIONO Multipath management MPEST Other Commands RENAME EMPTY EMPTYWORK EMPTYOUT AZEL BASICPP CODEPP OUTDET FIXPOS KEEP SYNC REMSAT REMOBS REMTMP How to create a new project","title":"Index of contents"},{"location":"#coding-gogps","text":"For a bit old presentation on the goGPS coding have a look at this presentation: Coding goGPS","title":"Coding goGPS"},{"location":"Command-language/","text":"goGPS command language goGPS have been designed to be flexible and expandable. To allow different types of processing and complex operations a pseudo-language have been created. It allows sequential and parallel operations. On this page, the meaning of all the commands can be found. For a short Help on all the commands available type goHelpCommands in MATLAB command window. Index of contents Receiver data organization Minimal script PUSHOUT How to select sessions How to select receivers Main commands LOAD PREPRO PPP NET Looping on receivers Parallel execution PINIT PKILL PAR Plots and export SHOW EXPORT Validation VALIDATE Ionospheric interpolation SEID SID REMIONO Multipath management MPEST Other Commands RENAME EMPTY EMPTYWORK EMPTYOUT AZEL BASICPP CODEPP OUTDET FIXPOS KEEP SYNC REMSAT REMOBS REMTMP Receiver data organization To be able to understand how goGPS works it is necessary to make a brief recap on the internal organization of the data. goGPS is object-oriented, every receiver is considered a unique GNSS_Station , internally the software stores data in two objects: work , and out . Work is an object of class Receiver_Work_Space and contains the observations and everything is needed for the computation of the results of a single session, out is an object of class Receiver_Output and collects the output of a receiver for all the sessions. The results stored in the work object are pushed to out only when the PUSHOUT command is issued. The following flags select the output to be kept. Note: the data stored in out can take a lot of RAM space, this is the reason for the possibility of selecting what must be kept. Minimal script The goGPS language uses a basic fixed structure to perform commands: an external FOR loop running on the sessions to process, and optionally internal loops on the receivers to process. Without a session loop, goGPS cannot do anything, this loop initializes the receiver work-spaces and prepares the needed resources (e.g. load orbits). A basic example structure is the following: FOR S* <some commands> PUSHOUT T* END <some commands> Every FOR loop must be terminated with an END . Sessions must be selected according to \" How to select sessions \" and receivers according to \" How to select receivers \" PUSHOUT To save the results of the processing in the out part of the receiver PUSHOUT is called on all the target receivers. At least one target receiver must be specified. The results to be copied from the receiver work-space (of a single session) to the receiver output (of multiple sessions) are specified in the processing panel Command modifiers: @ - processing rate in seconds (e.g. @30s, -r=30s) It is possible to store the date at a different rate of the one used for the processing, use values that are multiplier of the processing rate. This modifier allows saving memory, all the export on the out object of the receiver will be affected. If the modifier is not used the results are exported at the rate of processing. Usage example: Pushing results at a rate of 5 minutes PUSHOUT T* @300s How to select sessions After the keyword FOR the letter S ( S ession) follows, to indicate the number of the session(s) to process iteratively various options are given to the user: S* - the symbol '*' is used to indicate ALL the sessions, and will make goGPS iterate from session 1 (the first) to the last that is set to be processed; S1,2,5,6 - separating numbers with the ',' symbol makes goGPS process the session in the selected order; S3:6 - using the symbol ':' it is possible to select a list of sessions, in this example, the sessions 3,4,5,6 will be processed; S1:7:30 - similarly to the previous case, like in MATLAB syntax it is possible to provide a step to generate the list of sessions to be processed, in this example, the sessions 1,8,22,29 will be processed; S10:END - the keyword END or E indicates the last session. Combinations of the above are possible: e.g. S1:3,6,24:2:30 will select sessions 1,2,3,6,24,26,28,30. How to select receivers In goGPS language, the user needs to define the receivers that have to be processed or used for particular goals, some commands require different \"types\" of receivers: T* this indicates T arget receivers, these are the receivers on which the commands will act directly; R* this indicates R eference receivers, these are the receiver used by the commands for special purposes, e.g. reference receiver in a network adjustment, or reference receiver in an interpolation procedure; P* this indicates receivers to be P assed as is, in a parallel loop the receiver indicates with the \"P\" letter will be sent to all the parallel slaves. As for the sessions, the user can apply the same numbering convention of the sessions: T* - the symbol '*' is used to indicate ALL the receivers, and will make goGPS iterate from receiver 1 (the first) to the last available; T1,2,5,6 - separating numbers with the ',' symbol makes goGPS process the receiver in the selected order; T3:6 - using the symbol ':' it is possible to select a list of receivers, in this example, the receivers 3,4,5,6 will be processed; T1:7:30 - similarly to the previous case, like in MATLAB syntax it is possible to provide a step to generate the list of receivers to be processed, in this example, the receivers 1,8,22,29 will be processed; T10:END the keyword END or E indicates the last receiver. Combinations of the above are possible: e.g. T1:3,6,24:2:30 will select receivers 1,2,3,6,24,26,28,30. Main commands The minimal commands needed for processing GNSS data are three: LOAD , PREPRO , PPP or optionally NET , knowing these plus the session loop allows processing some data. An example of PPP processing can be FOR S* LOAD T* PREPRO T* PPP T* PUSHOUT T* END or a Network adjustment with the first receiver used as reference: FOR S* LOAD T* PREPRO T* NET T* R1 PUSHOUT T* END The setting panels are used to define the main options of these parameters but some modifiers can be used in the goGPS language commands. Here it follows the description of each command. LOAD The load command allows the software to import data from RINEX files. The files that are going to be loaded are selected in Data Sources tab and are relative to the current session. One or multiple targets need to be specified for the command to work. goGPS imports all the data at the rate stored into the RINEX files for all the constellation enabled in Pre-Processing tab unless some modifiers are used Command modifiers: -s= - active constellations (e.g. -s=GRE) @ - processing rate in seconds (e.g. @30s, -r=30s) It is possible to load the data at a different rate (as long as it is a multiple of the data rate stored in the files) and for a subset of constellations. The software read the file in blocks but when these options are enabled goGPS will import only the requested data, i.e. importing a file containing data at 1Hz at a lower rate (e.g. 30s) is faster than importing its original rate. Usage example: _Import the observations for the GPS and Galileo constellations @30 seconds rate for the current session for all the receivers LOAD T* @30s -s=GE Go back to the Index of contents PREPRO The pre-processing command is a mandatory command to prepare the loaded observations for further operations. In this function goGPS performs different tasks: code positioning - needed for computing a good a-priori position of the receiver, this is done unless a-priori coordinates are provided with a coordinate file in Receiver Info tab ; computation of clock delays (from code observations) computation of satellite positions at the time of signals transmission synchronization of the receiver to the nominal epoch of observation - low-cost receivers, and some geodetic ones may read the observations with an incorrect inconstant rate. To avoid problems in network solutions, and to restore a constant observation rate goGPS apply a correction term to all the observations to \"move\" them to the proper epoch. This term is computed by taking the difference of the synthesized pseudo-ranges at the nominal (transmission) time and at the observed (transmission) time (e.g. shifted by a few milliseconds). computation of a-priori atmospheric delays application of all the PPP corrections enabled in the settings outliers detection Command modifiers: -s= - active constellations (e.g. -s=GRE) Tip: It might be useful to speed-up computation to enable the data of a single constellation by using the \"s=\" modifier. goGPS will only perform a faster a-priori position, but all the other observations of different systems will be pre-processed as if they are enabled. Meaning that PPP corrections, atmospheric delays, and outlier detection will be performed on all the data. The command as written in the following usage example can be adopted even when a multi-constellation final result is wanted. Usage example: PREPRO T* -s=G Go back to the Index of contents PPP Perform a Precise Point Positioning on all the target receivers. The strategy to be adopted for the atmospheric parametrization and for the applied corrections must be pre-selected in the settings and can be changed in the GUI before executing the processing. Command modifiers: -s= - active constellations (e.g. -s=GRE) -u - (flag) use the U ncombined engine When the modifier -U is passed to the command the uncombined PPP engine is selected and uncombined residuals are computed. Tip: The uncombined engine for PPP solutions is a bit slower than the combined version, at the moment for most of the usage the combined engine is still the best choice. Usage example: PPP T* Go back to the Index of contents NET Perform a Network adjustment on all the target receivers, using the selected reference receiver(s). This command allows computing individual baselines (e.g. NET T1:2 R1 ) or full network adjustments with many receivers (e.g. NET T1:10 R* ) Command modifiers: -s= - active constellations (e.g. -s=GRE) @ - processing rate in seconds (e.g. @30s, -r=30s) L - band to be used for single frequency adjustment (e.g. L1) --free - when the stations are distant (long baselines) they can be considered uncorrelated, use this flag to compute an absolute coordinate position COO_CRD - export coordinates as a .CRD file - this export have been created for debugging testing but it is unsupported, use the EXPORT command instead --clk - export the common parameter in network - this export have been created for testing purposes of the combined engine but it is unsupported -u - (flag) use the U ncombined engine (the old combined engine for the network adjustment is deprecated, the uncombined version will be always used) Tip: The uncombined engine for Network solutions is slower than the combined version but it can perform better and works on long baselines . Usage example: NET T* R1 Go back to the Index of contents Looping on receivers Now that the main commands have been described the for loop on receivers can be introduced. To use it the keyword FOR must be followed by the receivers to target and the subset of commands to be executed in the loop must be closed with an END keyword Usage example: This example uses the FOR loop to perform PPP sequentially, then computes a Network Adjustment on all the receivers FOR S* FOR T* LOAD T$ PREPRO T$ -s=G PPP T$ END NET T* R* -free -iono -U PUSHOUT T* END Note that the $ symbol is used within the target loop, this symbol indicates the current target. At each iteration, it will assume the value of the current target, in this case: 1,2,...till the number of receivers. Parallel execution goGPS uses a custom implementation of parallelism based on a master-slaves approach. This approach may have different drawbacks but does not require the MATLAB Parallel toolbox. goGPS automatically executes new instances of MATLAB in the background (sometimes on the Windows platform some of them fail to start properly and they are visible), then for each of these new instances, the software will start a function capable of waiting or executing limited tasks. To start a slave manually a user can execute: gos = Go_Slave.getInstance(); gos.live(); The MATLAB executing goGPS is the Master that dispatches jobs and collects results. All the communications are managed by writing and reading files on a disk, it is important for speed purposes that this folder is created on a fast drive. The \"communication\" directory path is set in the project ini file and can be modified in the Advanced tab of the GUI. The class Parallel_Manager have been created to manage the parallel slaves: Parallel_Manager.killAll(); run this to kill background slaves Parallel_Manager.testSlaves(); run this to test the status of the background slaves Parallel_Manager.requestSlaves(<num_of_slaves>); run this to initialize \"num_of_slaves\" slaves To simplify the generation and maintenance of the slaves two goGPS commands have been created: PINIT This command is used to initialize or check the existence of parallel slaves running in the background Command modifiers: -n= - this is the only parameter (mandatory) that specify the number of background tasks to be executed in parallel (e.g. PINIT n=7, or alternative syntax PINIT N7) Usage example: PINIT -n=7 Go back to the Index of contents PKILL This command has no parameters and allows to kill all the slaves in the background (all the MATLAB instances running slaves will be closed) Usage example: PKILL Note 1: unfortunately due to bugs or unexpected operations some of the background instances may be still alive even after issuing a PKILL command. in this case, it is recommended to manually kill the MATLABs running in the background using a task manager. Note 2: closing goGPS without issuing this command will leave the slaves running in background alive. Go back to the Index of contents PAR Once slaves have been created a parallel execution can be used. There are two types of supported parallel executions in goGPS: Parallel session processing Parallel targets processing It is possible to use only one type of execution at a time. They work just like a FOR loop but with the keyword PAR Usage example 1: This example uses the PAR loop to perform PPP processing on all the targets parallelizing the sessions PINIT N5 PAR S* FOR T* LOAD T$ PREPRO T$ -s=G PPP T$ END NET T* R* -free -iono -U END PKILL Note: the PAR loop on sessions automatically executes PUSHOUT after loading the data processed by each slave. Slaves only save the work-space of each processed receivers and not the output part. Usage example 2: This example uses the PAR loop to perform parallel PPP processing on all the targets for all the sessions PINIT N5 FOR S* PAR T* LOAD T$ PREPRO T$ -s=G PPP T$ PUSHOUT T$ END END PKILL Note: parallel slaves do not receive automatically all the receivers as stored in the Master process; when they start an execution they have empty receivers unless the modifier P is used. On the contrary, the object GNSS_Station (containing both work and out ) is imported by the master process as is found in the Slave at the end of its computations. Command modifiers: P * - work-spaces to be passed to the slaves This means that this code to compute all the baselines with respect to the first receiver is not working: PINIT N5 FOR S* LOAD T1 PREPRO T1 -s=G PPP T1 PAR T2:END NET T1,$ R1 <= the receiver 1 for the slaves is empty END PUSHOUT T$ END PKILL while this is ok: PINIT N5 FOR S* LOAD T1 PREPRO T1 -s=G PPP T1 PAR T2:END P1 <= the work-space of receiver 1 is passed to all the slaves NET T1,$ R1 END PUSHOUT T$ END PKILL Go back to the Index of contents Plots and export goGPS includes many functions for the visualization and export of the results, they are accessible as methods of some classes (e.g. GNSS_Station, Receiver_Work_Space, ...) that can be called from the MATLAB command window, as commands in the goGPS language, and from a dedicated GUI. The methods of the classes that show plots or maps have the prefix show , while the export function prefix export . Many options are available for creating plots, for this reason, a simplified GUI has been created. It can be opened by typing goInspector in the MATLAB command window, but it will be automatically displayed by goGPS at the end of its execution if the GUI is enabled. This interface is still under development and more plots and exports will be added in the future. SHOW The command SHOW allows creating plots and maps. It requires that results are already computed and stored in the receiver(s). There are many SHOW modifiers that can be used, each is a shortcut to a class method. The two tabs \"plot 1\" and \"plot 2\" in goInspector provide a fast method to call them manually Command modifiers: -s= - Active constellations (e.g. -s=GRE) - not all the SHOW modifiers support this additional flag -e=<\"name\"> - Export with name_postfix - if this flag is passed to the command SHOW the generated figures will be exported. \"name\" is optional and will be appended to an autogenerated name (stored in the UserData property of the MATLAB figure). Automatically goGPS will save the images in the out folder as \"PNG\" to request a different format \"name\" can be set to match a particular filetype (e.g. SHOW T* ZTD -e=\".pdf\" will save the image as PDF file, SHOW T* ZTD -e will save the ZTD of all the receivers as PNG) -c - Close figure after export (valid only if the previous export modifier is present) MAP - Map of station coordinates (Google Maps Background) - (one plot for all the receivers) L_MAP - Legacy map of station coordinates (Google Maps background) - (one plot for all the receivers) G_MAP - Map of station coordinates (Google Maps Background) - (one plot for all the receivers) DTM_MAP - Map of station coordinates (DTM background) - (one plot for all the receivers) G_MAP_R - Map of station coordinates (Google Maps Background) + RAOB - (one plot for all the receivers) DTM_MAP_R - Map of station coordinates (DTM background) + RAOB - (one plot for all the receivers) DA - Data Availability - (one set of plots per receiver) ENU - East Nord Up positions - (one plot per receiver) This command additionally accept the modifier --ctype=<coo_type> that indicates the type of coordinates to be used as a source for the plot ( 0 coordinates of the sessions, 1 first additional coordinates, 2 second additional coordinates, 3 third additional coordinates) PUP - Planar Up positions - (one plot per receiver) This command additionally accept the modifier --ctype=<coo_type> that indicates the type of coordinates to be used as a source for the plot ( 0 coordinates of the sessions, 1 first additional coordinates, 2 second additional coordinates, 3 third additional coordinates) ENUBSL - East Nord Up baseline - this modifier requires to specify both targets and reference receiver This command additionally accept the modifier -ctype=<coo_type> that indicates the type of coordinates to be used as a source for the plot ( 0 coordinates of the sessions, 1 first additional coordinates, 2 second additional coordinates, 3 third additional coordinates) PUPBSL - Planar Up baseline - this modifier requires to specify both targets and reference receiver XYZ - XYZ Earth-Fixed - Earth-Centered positions - (one plot per receiver) CKW - Clock errors of the last session - (one plot per receiver) CK - Clock errors - (one plot per receiver) MP1 - Zernike interpolated multipath maps stored in the target receiver (polar plot) - (one plot per frequency/receiver) MP2 - Multipath stacking maps stored in the target receiver (polar plot) - (one plot per frequency/receiver) SNR - Signal to Noise Ratio (polar plot) - (one plot per receiver) SNRI - Signal to Noise Ratio (polar plot, interpolated map) - (one plot per receiver) OSTAT - Observation stats (last session) - (one plot per receiver) PSTAT - Processing stats (multi-session) - (one plot per receiver) OCS - Outliers and cycle slips - (one plot per receiver) OCSP - Outliers and cycle slips (polar plot) - (one plot per receiver) RES - Residual plot - (one plot per receiver) RES_O_PR - Output pseudo-range residuals - (one plot per receiver) RES_W_PR - Work-Space pseudo-range residuals - (one plot per receiver) RES_O_PH - Output phase residuals - (one plot per receiver) RES_W_PH - Work-Space phase residuals - (one plot per receiver) RES_O_PR_STAT - Output pseudo-range residuals statistics - (one plot per receiver) RES_W_PR_STAT - Work-Space pseudo-range residuals statistics - (one plot per receiver) RES_O_PH_STAT - Output phase residuals statistics - (one plot per receiver) RES_W_PH_STAT - Work-Space phase residuals statistics - (one plot per receiver) RES_O_PR_SKY - Output pseudo-range residuals cartesian sky plot- (one plot per receiver) RES_W_PR_SKY - Work-Space pseudo-range residuals cartesian sky plot- (one plot per receiver) RES_O_PH_SKY - Output phase residuals cartesian sky plot- (one plot per receiver) RES_W_PH_SKY - Work-Space phase residuals cartesian sky plot- (one plot per receiver) RES_O_PR_SKYP - Output pseudo-range residuals polar sky plot- (one plot per receiver) RES_W_PR_SKYP - Work-Space pseudo-range residuals polar sky plot- (one plot per receiver) RES_O_PH_SKYP - Output phase residuals polar sky plot- (one plot per receiver) RES_W_PH_SKYP - Work-Space phase residuals polar sky plot- (one plot per receiver) PTH - Pressure / Temperature / Humidity - (one plot per receiver) NSAT - Number of satellite used (multi-receiver) NSATSS - Number of satellite used (sys by sys) - (one plot per receiver) NSATSSS - Smoothed number of satellite used (sys by sys) - (one plot per receiver) ZTD - Zenith Total Delay - (one plot for all the receivers) ZTD_VSH - Zenith Total Delay vs Height - (one plot for all the receivers) ZHD - Zenith Hydrostatic Delay - (one plot for all the receivers) ZWD - Zenith Wet Delay - (one plot for all the receivers) ZWD_VSH - Zenith Wet Delay vs Height - (one plot for all the receivers) PWV - Precipitable Water Vapour - (one plot for all the receivers) STD - Zenith Total Delay with slants - (one plot per receiver) RES_STD - Slants Total Delay residuals (polar plot) - (one plot per receiver) TGRAD - Tropospheric gradients table - Display a line of arrows (100) for each receiver indicating the direction and magnitude of the tropospheric gradient. This display function works best with ~45 receivers. Go back to the Index of contents EXPORT This command is used to save on disk the results computed with goGPS. The tabs \"export\" in goInspector provides shortcuts to manually call the export methods. Command modifiers: CORE_MAT - Save the core object as .mat file - this object contains the entire status of the processing, including all the receivers, it is very useful to have it so that the results might be inspected in the future. This modifier ignores the target parameter. PLAIN_MAT - Save the receiver as plain .mat files (no objects) - this modifier is useful when the results of goGPS must be opened from other languages or older MATLABs, the receivers will be exported as a struct. REC_MAT - Receiver object as .mat file - similar to the previous modifier, this option allows to save any receiver as GNSS_Receiver object. REC_RIN - RINEX file containing the actual data stored in rec.work - this export can be useful to save filtered/synced receiver observations. All the applied PPP corrections and satellite clocks will be removed from the observations before the export. MP - Export the multipath maps stored in the GNSS_Station object. COO_CRD - Coordinates .CRD file - the median coordinates stored in the receiver will be saved in a file that can be used in the Receiver Info tab . XYZ_TXT - Coordinates XYZ in plain text format. ENU_TXT - Coordinates local ENU in plain text format. GEO_TXT - Coordinates Geodetic in plain text format. TRP_SNX - Tropo parameters (epoch, ZTD, Gradient North, Gradient East) as SINEX file. TRP_MAT - Tropo parameters (position, UTC time, ZTD, ZWD) as .mat file. TRP_CSV - Tropo parameters (epoch, ZTD, ZWD, Gradient East, Gradient North) as .csv file. TRP_HN - Tropo parameters as a HydroNet (CSV like) file. Go back to the Index of contents Validation Go goGPS is probably the only GNSS processing software that includes functions for automatic comparison with Radiosondes and IGS official solutions (open an issue if this is wrong, I'm curious ^_^). At the moment it is possible to automatically make 3 automatic comparisons using the command VALIDATE . VALIDATE This command allows comparing the results obtained with goGPS with external sources. Be aware that the level and type of regularization chosen, the mapping function used for the tropospheric estimation, and multiple processing options may lead to different results. Comparing results with IGS official solutions have to be done mimicking as much as possible the processing done to obtain those results (same orbits, same mapping functions, same spline rate, ...) otherwise the validation only has a relative value. Command modifiers: -e=<\"name\"> - Export with name_postfix - if this flag is passed to the command SHOW the generated figures will be exported. \"name\" is optional and will be appended to an autogenerated name (stored in the UserData property of the MATLAB figure). Automatically goGPS will save the images in the out folder as \"PNG\" to request a different format \"name\" can be set to match a particular filetype (e.g. VALIDATE T* RAOB -e=\".pdf\" will save the images as PDF files, VALIDATE T* RAOB -e will save the validation results of all the receivers as PNG) -c - Close figure after export (valid only if the previous export modifier is present) IGS - Use IGS results for validation - this function generates a unique figure containing the statistics of mean and standard deviation for positions and tropospheric parameters for all the stations (the validation works only on IGS permanent stations) IGS_ZTD - Use IGS results for ZTD validation - for every IGS station processed the function will generate a plot with the ZTD estimated by goGPS and the official one of IGS, a table with all the statistics will be shown in the log, and a final map to recap the differences in terms of mean and standard deviation will be displayed. RAOB - Use RAOB for ZTD validation - for every radiosonde launching site the function will generate a plot with the ZTD estimated by goGPS and the one obtained by integration of the RAOB data, a table with all the statistics will be shown in the log, and a final map to recap the differences in terms of mean and standard deviation will be displayed. Radiosondes are usually launched from airports and not all the GNSS stations have close launching sites for making a comparison, goGPS will use the closest site or all the radiosondes falling in the area containing the processed receivers. The data needed by goGPS will be automatically downloaded from the University of Wyoming website. The ZTD computed by goGPS in the radiosonde launch site is obtained by natural interpolation with all the GNSS stations used for the validation. Note: all the radiosondes used for this validation are launched every day at 00 and 12 UTC, only two points per day will be available. Warning: The radiosonde ZTD is formed with the integration of a column of water vapor that might not be vertical in the presence of winds, making the value obtained different with respect to the one estimated by goGPS. To display this map run Radiosonde.showMap(Radiosonde.getRaobList) from the MATLAB command line. If anyone finds that a radiosonde site is missing in goGPS is invited to open a goGPS issue on GitHub. For a map with all the close radiosonde sites exec SHOW T* DTM_MAP_R on goGPS inspector. Go back to the Index of contents Ionospheric interpolation In the beginning, goGPS have been created to work specifically with low-cost receivers, before 2019 most of them were single-frequency receivers and even today in 2020 most of the low-cost GNSS stations already deployed are not able to track more than one frequency. Having at least two different signals with different wave-lengths is important to compensate for ionospheric delays and apply PPP, to overcome this limit goGPS can interpolate ionospheric delays by using some reference receivers and then generate a synthetic set of L2 observations. All the interpolating techniques are based on the paper \"Satellite specific Epoch differenced Ionospheric Delay\" (Deng et al 2009) SEID The Satellite specific Epoch differenced Ionospheric Delay algorithm works satellite by satellite in the following way: 1. compute all the ionospheric piercing point (thin shell approximation) 2. compute the ionosphere from the geometry-free combination of the reference receivers 3. differentiate the ionosphere in time (i.e. compute the speed of variation) 4. compute the interpolated differenced ionosphere weighted on the inverse of the spherical distance on the target receivers 5. synthesize L2 by adding to L1 the integration of the interpolated values Usage example: Using 4 reference stations and one target to compute Precise Point Positioning with the paper version of SEID PINIT N5 FOR S* PAR T* LOAD T$ PREPRO T$ -s=G END SEID R1:4 T5 PLANE PPP T* END SHOW T* ZTD Command modifiers: PLANE - (flag) use a plane for the interpolation of the differenced geometry free, this is the original implementation as described in the paper but requires a minimum of 3 reference receivers. Go back to the Index of contents SID SID (Satellite specific Ionospheric Delay) is a modified version of the SEID approach, it does not use time differentiation. The interpolated ionosphere is computed jointly with a Least Squares (LS) adjustment taking as input both pseudo-range and carrier-phase Geometry-Free (GF) combinations, a bias parameter is added for each arc, and the rank-deficiency of the system is resolved by using a Lagrange multiplier (set the mean to the mean of the GF of code). Usage example: Using 4 reference stations and one target to compute Precise Point Positioning with SID approach PINIT N5 FOR S* PAR T* LOAD T$ PREPRO T$ -s=G END SID R1:4 T5 PLANE PPP T* END SHOW T* ZTD Go back to the Index of contents REMIONO This command can be used similarly to SEID it has been created as an experimental Satellite specific Epoch differenced Ionospheric Delay algorithm, in addition to the original approach it tries to smooth the computed geometry-free. Instead of generating a synthetic L2 it removes the ionospheric delay to the phase observations of the target receiver. Without generating the second frequency it generally behaves worse than the previous approaches because outlier rejection works differently and a stronger regularization is required to have a comparable result, for these reasons the command is present but kept as experimental under testing. Go back to the Index of contents Multipath management goGPS integrates the possibility of creating and using multipath maps to mitigate the effect of reflections in the GNSS carrier-phase signals. We create our maps by processing a long period of data (10 days minimum are suggested) with the goGPS engine. From the obtained carrier phase residuals we can then generate maps of the common \"geographical\" errors in the polar coordinate system (e.g. Multipath effects coming from structures are always affecting the signals the same way, so each satellite transmitting from a certain elevation and angle is always affected by the same multipath disturbance). Multipath maps can be then used to mitigate the range errors allowing a better positioning. Our preliminary test shows that coordinates estimated for short sessions (e.g. every 15 minutes/hourly) can be improved by about 15-30% depending on the level of multipath. goGPS can apply multipath maps of RAW observations in the step of PREPRO , if maps of iono-free combinations are present they will be applied in the generation of the static PPP system, combined maps will not modify the observations directly. Before interpolating the residuals these are selected by filtering the worse observations, in particular in addition to the snooping methods applied in the PPP/NET solutions a 3sigma threshold is used to discard outliers. Residuals falling in a bin of 1 degree in latitude and 360 in longitude are used to evaluate latitude by latitude the variance of the residuals, all the observation above the 3sigma level are ignored in the interpolation process (about 1-1.5% of the data are usually disregarded). To regularize the solution for each cell of 1x1 degree with less than 2 observations 1 null pseudo-observation is added to the dataset to be interpolated. For each frequency (or combination) present in the receiver, a multi-step procedure is used to generate the goGPS multipath maps 1. Uncombined carrier-phase residuals are all used in a LS solution to compute the Zernike expansion coefficients up to degree 43 (can be changed in the code). These coefficients are then used to synthesize a map of 0.5x0.5 degree in the cartesian coordinate system elevation x azimuth (180x720). Zernike polynomials are good to map low degree changes on the disk (e.g. PCV) but for Multipath maps, a higher degree is preferable. Zernike polynomials are capable of describing changes in the signal depending on the distance from the center of the disk, with a radius close to 1, higher frequencies can be represented. In goGPS we perform 3 analyses at the same degree level using 3 mapping functions to map the elevation to the unitary radius so that we can better describe the undulations due to multipath. The two mapping functions are: MF1 = cos(el)^2 MF2 = sin(pi/2 * cos(el)^2) MF3 = sin(pi/2 * cos(el)) After a first analysis, the second is performed on the residuals of the first, and so the third. A synthetic final map is computed by adding the three matrixes. The figures show the maps retrieved from the first two iterations of the Zernike based interpolation for the WTZZ station. Stacking maps can be generated from the residuals of the previous step that provides an interpolation of the lower frequencies. The gridding procedure uses cells of 5 degrees in longitude and 1 in latitude, for each cell the mean is taken, each value is converted in polar coordinates and a final grid at the resolution of 0.5 degrees in cartesian coordinate (elevation x azimuth) is created by bi-linear interpolation in the polar coordinate system. These are the third iteration and the final gridding step on the residuals of the WTZZ station. At the end, the maps are summed all together to generate two possible applicable models, the first smoother, and the second containing the higher frequencies of the staking map. The user can decide the map that works best in his project by selecting it in the settings. On the left the smoother solution, on the right the highest details of the staking are preserved MPEST The command MPEST can be used on a target receiver previously processed in PPP/NET with that still contains phase residuals. It automatically generates two maps for each observation combination (or RAW): one estimated from Zernike interpolation and the second by simple stacking. If multipath mitigation is enabled, and uncombined residuals are present, at the end of the computations, the command applies the corrections to the phase observations contained into the receiver. The result of the command is stored in the obj of class GNSS_Staion in the field ant_mp. Use EXPORT T* MP to export a multipath map. Usage example: Multipath maps creation PAR S* FOR T* LOAD T$ @30s PREPRO T$ -s=G PPP T$ -U END PUSHOUT T* END MPEST T* EXPORT T* MP Go back to the Index of contents Other Commands Additional commands may be used to do minor operations, such as clean part of the objects to free up space, rename receivers, compute simplified positions, or filter observations: RENAME Rename is a simple command that allows setting the Marker Name of a receiver, this may be useful when comparing the same receiver processed with different approaches Usage example: Suppose to compare the station ZIMM processed with GPS only, GLONASS only and Galileo only, one may rename the station, loaded tree times from the same RINEX file, as ZIMG, ZIMR, ZIME, to display different labels in the plot FOR S* LOAD T1 -s=G LOAD T2 -s=R LOAD T3 -s=E PREPRO T* PPP T* RENAME T1 ZIMG RENAME T2 ZIMR RENAME T3 ZIME END SHOW T* ZTD Go back to the Index of contents EMPTY This function resets the content of the target GNSS_Station like it was not yet loaded and processed freeing up all of the memory Usage example: Computing ZTD for 100 stations freeing the memory after export (one session) FOR S1 FOR T1:100 LOAD T$ PREPRO T$ PPP T$ EXPORT T$ TRP_SNX SHOW T$ ZTD -e -c EMPTY T$ END END Go back to the Index of contents EMPTYWORK This function resets the content of the Work-space (the current session) of the target GNSS_Station freeing up some of the memory occupied by the receiver Usage example: Computing PWV for 100 stations freeing the memory after export (multiple session) FOR S* FOR T1:100 LOAD T$ PREPRO T$ PPP T$ PUSHOUT T$ EMPTYWORK T$ END END SHOW T* PWV Go back to the Index of contents EMPTYOUT This function resets the content of the Output object of the target GNSS_Station freeing up some of the memory occupied by the receiver Usage example: Computing two images of PWV comparison, one for the first 10 sessions one for the second 10 sessions FOR S1:10 FOR T* LOAD T$ PREPRO T$ PPP T$ PUSHOUT T$ EMPTYWORK T$ END END SHOW T* PWV -e FOR S11:20 FOR T* LOAD T$ PREPRO T$ PPP T$ PUSHOUT T$ EMPTYWORK T$ END END SHOW T* PWV -e Go back to the Index of contents REMTMP Similar to the EMPTYWORK command this function removes from the Work-Space all the data not needed for the push of the results, might be useful in parallel computations to limit the number of data saved on disk and to free some memory. Usage example: Computing ZWD for multiple parallel sessions. Remember that the PAR loop on sessions automatically execute PUSHOUT after loading the data processed by each slave and so it requires the object work to be exportable (EMPTYWORK cannot be used here) PINIT N5 PAR S* FOR T* LOAD T$ PREPRO T$ PPP T$ REMTMP T$ END END SHOW T* ZWD Go back to the Index of contents AZEL Compute Azimuth and elevation of a receiver, if a position has been computed or it's present in the coordinate file. Usage example: Computing azimuth and elevation to display a polar plot of the SNR of a receiver FOR S1 LOAD T1 AZEL T1 SHOW T1 SNR END Go back to the Index of contents BASICPP Compute a simple but fast code position on a target receiver without applying any range correction Usage example: Creating an a-priori coordinate file for all the receivers FOR S1 LOAD T* BASICPP T* EXPORT COO_CRD END Go back to the Index of contents CODEPP Running this command goGPS will compute a Code Positioning, this command does not perform any outlier rejection and does not apply any desync of the observations, it should not be used without running a pre-processing on the target receives. Usage example: CODEPP T1 Go back to the Index of contents OUTDET Perform outlier detection on phases, normally this is done in pre-processing but there are cases when this is useful, in fact, PPP and NET processing modify the status of the outliers. Usage example: In this case OUTDET is used to reset the flagged outliers at each iteration FOR S* LOAD T1 PREPRO T1 -s=G PPP T1 FOR T2:END P1 OUTDET T1 NET T1,$ R1 END PUSHOUT T$ END Go back to the Index of contents FIXPOS This command allows changing the reference coordinate type (by default it set the position as fixed). Command modifiers: FROM_WORK - (flag) use data from Work Space (current session) FROM_OUT - (flag) use data from Receiver Output object AS_APR - (flag) use position as a new a-priori position (not as fixed) Usage example: In this example a PPP solution is computed in the first session, later the other 29 sessions are processed with the fixed position of the first session FOR S1 LOAD T1 PREPRO T1 -s=G PPP T1 FIXPOS T1 END FOR S2:30 LOAD T1 PREPRO T1 -s=G PPP T1 END Go back to the Index of contents KEEP This command can be used to remove some data from the receiver's work-space by telling goGPS what to keep. Command modifiers: @ - Rate in seconds (e.g. @30s, -r=30s) **-s= Active constellations (e.g. -s=GRE) **-e= Cut-off elevation in degree (e.g. -e=7) **-q= SNR threshold in dbHZ (e.g. -q=7) Usage example: Keep only observations of GPS satellites having elevation greater than 15deg KEEP T1 -s=G -e=15 Go back to the Index of contents SYNC Syncronize all the receivers at the same rate, keeping only the epochs between the first and the last among all the receivers. Command modifiers: @ - Rate in seconds (e.g. @30s, -r=30s) Usage example: SYNC T* @60s Go back to the Index of contents REMSAT Remove all the observations of a satellite from a target receiver. The function accepts a single list of satellites to be removed with the first letter of the constellation (GREJCI) and two digits for the PRN number. format: <1ch sat. sys. (GREJCI)><2ch sat. prn> Usage example: _Remove GPS satellite with PRN 4 or PRN 29, and the Galileo satellite with PRN 25. REMSAT T* G04,G29,E25 Go back to the Index of contents REMOBS Remove some observation types from a target receiver. format: <1ch obs. type (CPDS)><1ch freq><1ch tracking> Usage example: Remove from the first receiver all the doppler observations, the SNR of the second frequency and the second frequency of carrier-phases of the civilian tracking REMOBS T1 D,S2,L2C Go back to the Index of contents","title":"Command language"},{"location":"Command-language/#gogps-command-language","text":"goGPS have been designed to be flexible and expandable. To allow different types of processing and complex operations a pseudo-language have been created. It allows sequential and parallel operations. On this page, the meaning of all the commands can be found. For a short Help on all the commands available type goHelpCommands in MATLAB command window.","title":"goGPS command language"},{"location":"Command-language/#index-of-contents","text":"Receiver data organization Minimal script PUSHOUT How to select sessions How to select receivers Main commands LOAD PREPRO PPP NET Looping on receivers Parallel execution PINIT PKILL PAR Plots and export SHOW EXPORT Validation VALIDATE Ionospheric interpolation SEID SID REMIONO Multipath management MPEST Other Commands RENAME EMPTY EMPTYWORK EMPTYOUT AZEL BASICPP CODEPP OUTDET FIXPOS KEEP SYNC REMSAT REMOBS REMTMP","title":"Index of contents"},{"location":"Command-language/#receiver-data-organization","text":"To be able to understand how goGPS works it is necessary to make a brief recap on the internal organization of the data. goGPS is object-oriented, every receiver is considered a unique GNSS_Station , internally the software stores data in two objects: work , and out . Work is an object of class Receiver_Work_Space and contains the observations and everything is needed for the computation of the results of a single session, out is an object of class Receiver_Output and collects the output of a receiver for all the sessions. The results stored in the work object are pushed to out only when the PUSHOUT command is issued. The following flags select the output to be kept. Note: the data stored in out can take a lot of RAM space, this is the reason for the possibility of selecting what must be kept.","title":"Receiver data organization"},{"location":"Command-language/#minimal-script","text":"The goGPS language uses a basic fixed structure to perform commands: an external FOR loop running on the sessions to process, and optionally internal loops on the receivers to process. Without a session loop, goGPS cannot do anything, this loop initializes the receiver work-spaces and prepares the needed resources (e.g. load orbits). A basic example structure is the following: FOR S* <some commands> PUSHOUT T* END <some commands> Every FOR loop must be terminated with an END . Sessions must be selected according to \" How to select sessions \" and receivers according to \" How to select receivers \"","title":"Minimal script"},{"location":"Command-language/#pushout","text":"To save the results of the processing in the out part of the receiver PUSHOUT is called on all the target receivers. At least one target receiver must be specified. The results to be copied from the receiver work-space (of a single session) to the receiver output (of multiple sessions) are specified in the processing panel Command modifiers: @ - processing rate in seconds (e.g. @30s, -r=30s) It is possible to store the date at a different rate of the one used for the processing, use values that are multiplier of the processing rate. This modifier allows saving memory, all the export on the out object of the receiver will be affected. If the modifier is not used the results are exported at the rate of processing. Usage example: Pushing results at a rate of 5 minutes PUSHOUT T* @300s","title":"PUSHOUT"},{"location":"Command-language/#how-to-select-sessions","text":"After the keyword FOR the letter S ( S ession) follows, to indicate the number of the session(s) to process iteratively various options are given to the user: S* - the symbol '*' is used to indicate ALL the sessions, and will make goGPS iterate from session 1 (the first) to the last that is set to be processed; S1,2,5,6 - separating numbers with the ',' symbol makes goGPS process the session in the selected order; S3:6 - using the symbol ':' it is possible to select a list of sessions, in this example, the sessions 3,4,5,6 will be processed; S1:7:30 - similarly to the previous case, like in MATLAB syntax it is possible to provide a step to generate the list of sessions to be processed, in this example, the sessions 1,8,22,29 will be processed; S10:END - the keyword END or E indicates the last session. Combinations of the above are possible: e.g. S1:3,6,24:2:30 will select sessions 1,2,3,6,24,26,28,30.","title":"How to select sessions"},{"location":"Command-language/#how-to-select-receivers","text":"In goGPS language, the user needs to define the receivers that have to be processed or used for particular goals, some commands require different \"types\" of receivers: T* this indicates T arget receivers, these are the receivers on which the commands will act directly; R* this indicates R eference receivers, these are the receiver used by the commands for special purposes, e.g. reference receiver in a network adjustment, or reference receiver in an interpolation procedure; P* this indicates receivers to be P assed as is, in a parallel loop the receiver indicates with the \"P\" letter will be sent to all the parallel slaves. As for the sessions, the user can apply the same numbering convention of the sessions: T* - the symbol '*' is used to indicate ALL the receivers, and will make goGPS iterate from receiver 1 (the first) to the last available; T1,2,5,6 - separating numbers with the ',' symbol makes goGPS process the receiver in the selected order; T3:6 - using the symbol ':' it is possible to select a list of receivers, in this example, the receivers 3,4,5,6 will be processed; T1:7:30 - similarly to the previous case, like in MATLAB syntax it is possible to provide a step to generate the list of receivers to be processed, in this example, the receivers 1,8,22,29 will be processed; T10:END the keyword END or E indicates the last receiver. Combinations of the above are possible: e.g. T1:3,6,24:2:30 will select receivers 1,2,3,6,24,26,28,30.","title":"How to select receivers"},{"location":"Command-language/#main-commands","text":"The minimal commands needed for processing GNSS data are three: LOAD , PREPRO , PPP or optionally NET , knowing these plus the session loop allows processing some data. An example of PPP processing can be FOR S* LOAD T* PREPRO T* PPP T* PUSHOUT T* END or a Network adjustment with the first receiver used as reference: FOR S* LOAD T* PREPRO T* NET T* R1 PUSHOUT T* END The setting panels are used to define the main options of these parameters but some modifiers can be used in the goGPS language commands. Here it follows the description of each command.","title":"Main commands"},{"location":"Command-language/#load","text":"The load command allows the software to import data from RINEX files. The files that are going to be loaded are selected in Data Sources tab and are relative to the current session. One or multiple targets need to be specified for the command to work. goGPS imports all the data at the rate stored into the RINEX files for all the constellation enabled in Pre-Processing tab unless some modifiers are used Command modifiers: -s= - active constellations (e.g. -s=GRE) @ - processing rate in seconds (e.g. @30s, -r=30s) It is possible to load the data at a different rate (as long as it is a multiple of the data rate stored in the files) and for a subset of constellations. The software read the file in blocks but when these options are enabled goGPS will import only the requested data, i.e. importing a file containing data at 1Hz at a lower rate (e.g. 30s) is faster than importing its original rate. Usage example: _Import the observations for the GPS and Galileo constellations @30 seconds rate for the current session for all the receivers LOAD T* @30s -s=GE Go back to the Index of contents","title":"LOAD"},{"location":"Command-language/#prepro","text":"The pre-processing command is a mandatory command to prepare the loaded observations for further operations. In this function goGPS performs different tasks: code positioning - needed for computing a good a-priori position of the receiver, this is done unless a-priori coordinates are provided with a coordinate file in Receiver Info tab ; computation of clock delays (from code observations) computation of satellite positions at the time of signals transmission synchronization of the receiver to the nominal epoch of observation - low-cost receivers, and some geodetic ones may read the observations with an incorrect inconstant rate. To avoid problems in network solutions, and to restore a constant observation rate goGPS apply a correction term to all the observations to \"move\" them to the proper epoch. This term is computed by taking the difference of the synthesized pseudo-ranges at the nominal (transmission) time and at the observed (transmission) time (e.g. shifted by a few milliseconds). computation of a-priori atmospheric delays application of all the PPP corrections enabled in the settings outliers detection Command modifiers: -s= - active constellations (e.g. -s=GRE) Tip: It might be useful to speed-up computation to enable the data of a single constellation by using the \"s=\" modifier. goGPS will only perform a faster a-priori position, but all the other observations of different systems will be pre-processed as if they are enabled. Meaning that PPP corrections, atmospheric delays, and outlier detection will be performed on all the data. The command as written in the following usage example can be adopted even when a multi-constellation final result is wanted. Usage example: PREPRO T* -s=G Go back to the Index of contents","title":"PREPRO"},{"location":"Command-language/#ppp","text":"Perform a Precise Point Positioning on all the target receivers. The strategy to be adopted for the atmospheric parametrization and for the applied corrections must be pre-selected in the settings and can be changed in the GUI before executing the processing. Command modifiers: -s= - active constellations (e.g. -s=GRE) -u - (flag) use the U ncombined engine When the modifier -U is passed to the command the uncombined PPP engine is selected and uncombined residuals are computed. Tip: The uncombined engine for PPP solutions is a bit slower than the combined version, at the moment for most of the usage the combined engine is still the best choice. Usage example: PPP T* Go back to the Index of contents","title":"PPP"},{"location":"Command-language/#net","text":"Perform a Network adjustment on all the target receivers, using the selected reference receiver(s). This command allows computing individual baselines (e.g. NET T1:2 R1 ) or full network adjustments with many receivers (e.g. NET T1:10 R* ) Command modifiers: -s= - active constellations (e.g. -s=GRE) @ - processing rate in seconds (e.g. @30s, -r=30s) L - band to be used for single frequency adjustment (e.g. L1) --free - when the stations are distant (long baselines) they can be considered uncorrelated, use this flag to compute an absolute coordinate position COO_CRD - export coordinates as a .CRD file - this export have been created for debugging testing but it is unsupported, use the EXPORT command instead --clk - export the common parameter in network - this export have been created for testing purposes of the combined engine but it is unsupported -u - (flag) use the U ncombined engine (the old combined engine for the network adjustment is deprecated, the uncombined version will be always used) Tip: The uncombined engine for Network solutions is slower than the combined version but it can perform better and works on long baselines . Usage example: NET T* R1 Go back to the Index of contents","title":"NET"},{"location":"Command-language/#looping-on-receivers","text":"Now that the main commands have been described the for loop on receivers can be introduced. To use it the keyword FOR must be followed by the receivers to target and the subset of commands to be executed in the loop must be closed with an END keyword Usage example: This example uses the FOR loop to perform PPP sequentially, then computes a Network Adjustment on all the receivers FOR S* FOR T* LOAD T$ PREPRO T$ -s=G PPP T$ END NET T* R* -free -iono -U PUSHOUT T* END Note that the $ symbol is used within the target loop, this symbol indicates the current target. At each iteration, it will assume the value of the current target, in this case: 1,2,...till the number of receivers.","title":"Looping on receivers"},{"location":"Command-language/#parallel-execution","text":"goGPS uses a custom implementation of parallelism based on a master-slaves approach. This approach may have different drawbacks but does not require the MATLAB Parallel toolbox. goGPS automatically executes new instances of MATLAB in the background (sometimes on the Windows platform some of them fail to start properly and they are visible), then for each of these new instances, the software will start a function capable of waiting or executing limited tasks. To start a slave manually a user can execute: gos = Go_Slave.getInstance(); gos.live(); The MATLAB executing goGPS is the Master that dispatches jobs and collects results. All the communications are managed by writing and reading files on a disk, it is important for speed purposes that this folder is created on a fast drive. The \"communication\" directory path is set in the project ini file and can be modified in the Advanced tab of the GUI. The class Parallel_Manager have been created to manage the parallel slaves: Parallel_Manager.killAll(); run this to kill background slaves Parallel_Manager.testSlaves(); run this to test the status of the background slaves Parallel_Manager.requestSlaves(<num_of_slaves>); run this to initialize \"num_of_slaves\" slaves To simplify the generation and maintenance of the slaves two goGPS commands have been created:","title":"Parallel execution"},{"location":"Command-language/#pinit","text":"This command is used to initialize or check the existence of parallel slaves running in the background Command modifiers: -n= - this is the only parameter (mandatory) that specify the number of background tasks to be executed in parallel (e.g. PINIT n=7, or alternative syntax PINIT N7) Usage example: PINIT -n=7 Go back to the Index of contents","title":"PINIT"},{"location":"Command-language/#pkill","text":"This command has no parameters and allows to kill all the slaves in the background (all the MATLAB instances running slaves will be closed) Usage example: PKILL Note 1: unfortunately due to bugs or unexpected operations some of the background instances may be still alive even after issuing a PKILL command. in this case, it is recommended to manually kill the MATLABs running in the background using a task manager. Note 2: closing goGPS without issuing this command will leave the slaves running in background alive. Go back to the Index of contents","title":"PKILL"},{"location":"Command-language/#par","text":"Once slaves have been created a parallel execution can be used. There are two types of supported parallel executions in goGPS: Parallel session processing Parallel targets processing It is possible to use only one type of execution at a time. They work just like a FOR loop but with the keyword PAR Usage example 1: This example uses the PAR loop to perform PPP processing on all the targets parallelizing the sessions PINIT N5 PAR S* FOR T* LOAD T$ PREPRO T$ -s=G PPP T$ END NET T* R* -free -iono -U END PKILL Note: the PAR loop on sessions automatically executes PUSHOUT after loading the data processed by each slave. Slaves only save the work-space of each processed receivers and not the output part. Usage example 2: This example uses the PAR loop to perform parallel PPP processing on all the targets for all the sessions PINIT N5 FOR S* PAR T* LOAD T$ PREPRO T$ -s=G PPP T$ PUSHOUT T$ END END PKILL Note: parallel slaves do not receive automatically all the receivers as stored in the Master process; when they start an execution they have empty receivers unless the modifier P is used. On the contrary, the object GNSS_Station (containing both work and out ) is imported by the master process as is found in the Slave at the end of its computations. Command modifiers: P * - work-spaces to be passed to the slaves This means that this code to compute all the baselines with respect to the first receiver is not working: PINIT N5 FOR S* LOAD T1 PREPRO T1 -s=G PPP T1 PAR T2:END NET T1,$ R1 <= the receiver 1 for the slaves is empty END PUSHOUT T$ END PKILL while this is ok: PINIT N5 FOR S* LOAD T1 PREPRO T1 -s=G PPP T1 PAR T2:END P1 <= the work-space of receiver 1 is passed to all the slaves NET T1,$ R1 END PUSHOUT T$ END PKILL Go back to the Index of contents","title":"PAR"},{"location":"Command-language/#plots-and-export","text":"goGPS includes many functions for the visualization and export of the results, they are accessible as methods of some classes (e.g. GNSS_Station, Receiver_Work_Space, ...) that can be called from the MATLAB command window, as commands in the goGPS language, and from a dedicated GUI. The methods of the classes that show plots or maps have the prefix show , while the export function prefix export . Many options are available for creating plots, for this reason, a simplified GUI has been created. It can be opened by typing goInspector in the MATLAB command window, but it will be automatically displayed by goGPS at the end of its execution if the GUI is enabled. This interface is still under development and more plots and exports will be added in the future.","title":"Plots and export"},{"location":"Command-language/#show","text":"The command SHOW allows creating plots and maps. It requires that results are already computed and stored in the receiver(s). There are many SHOW modifiers that can be used, each is a shortcut to a class method. The two tabs \"plot 1\" and \"plot 2\" in goInspector provide a fast method to call them manually Command modifiers: -s= - Active constellations (e.g. -s=GRE) - not all the SHOW modifiers support this additional flag -e=<\"name\"> - Export with name_postfix - if this flag is passed to the command SHOW the generated figures will be exported. \"name\" is optional and will be appended to an autogenerated name (stored in the UserData property of the MATLAB figure). Automatically goGPS will save the images in the out folder as \"PNG\" to request a different format \"name\" can be set to match a particular filetype (e.g. SHOW T* ZTD -e=\".pdf\" will save the image as PDF file, SHOW T* ZTD -e will save the ZTD of all the receivers as PNG) -c - Close figure after export (valid only if the previous export modifier is present) MAP - Map of station coordinates (Google Maps Background) - (one plot for all the receivers) L_MAP - Legacy map of station coordinates (Google Maps background) - (one plot for all the receivers) G_MAP - Map of station coordinates (Google Maps Background) - (one plot for all the receivers) DTM_MAP - Map of station coordinates (DTM background) - (one plot for all the receivers) G_MAP_R - Map of station coordinates (Google Maps Background) + RAOB - (one plot for all the receivers) DTM_MAP_R - Map of station coordinates (DTM background) + RAOB - (one plot for all the receivers) DA - Data Availability - (one set of plots per receiver) ENU - East Nord Up positions - (one plot per receiver) This command additionally accept the modifier --ctype=<coo_type> that indicates the type of coordinates to be used as a source for the plot ( 0 coordinates of the sessions, 1 first additional coordinates, 2 second additional coordinates, 3 third additional coordinates) PUP - Planar Up positions - (one plot per receiver) This command additionally accept the modifier --ctype=<coo_type> that indicates the type of coordinates to be used as a source for the plot ( 0 coordinates of the sessions, 1 first additional coordinates, 2 second additional coordinates, 3 third additional coordinates) ENUBSL - East Nord Up baseline - this modifier requires to specify both targets and reference receiver This command additionally accept the modifier -ctype=<coo_type> that indicates the type of coordinates to be used as a source for the plot ( 0 coordinates of the sessions, 1 first additional coordinates, 2 second additional coordinates, 3 third additional coordinates) PUPBSL - Planar Up baseline - this modifier requires to specify both targets and reference receiver XYZ - XYZ Earth-Fixed - Earth-Centered positions - (one plot per receiver) CKW - Clock errors of the last session - (one plot per receiver) CK - Clock errors - (one plot per receiver) MP1 - Zernike interpolated multipath maps stored in the target receiver (polar plot) - (one plot per frequency/receiver) MP2 - Multipath stacking maps stored in the target receiver (polar plot) - (one plot per frequency/receiver) SNR - Signal to Noise Ratio (polar plot) - (one plot per receiver) SNRI - Signal to Noise Ratio (polar plot, interpolated map) - (one plot per receiver) OSTAT - Observation stats (last session) - (one plot per receiver) PSTAT - Processing stats (multi-session) - (one plot per receiver) OCS - Outliers and cycle slips - (one plot per receiver) OCSP - Outliers and cycle slips (polar plot) - (one plot per receiver) RES - Residual plot - (one plot per receiver) RES_O_PR - Output pseudo-range residuals - (one plot per receiver) RES_W_PR - Work-Space pseudo-range residuals - (one plot per receiver) RES_O_PH - Output phase residuals - (one plot per receiver) RES_W_PH - Work-Space phase residuals - (one plot per receiver) RES_O_PR_STAT - Output pseudo-range residuals statistics - (one plot per receiver) RES_W_PR_STAT - Work-Space pseudo-range residuals statistics - (one plot per receiver) RES_O_PH_STAT - Output phase residuals statistics - (one plot per receiver) RES_W_PH_STAT - Work-Space phase residuals statistics - (one plot per receiver) RES_O_PR_SKY - Output pseudo-range residuals cartesian sky plot- (one plot per receiver) RES_W_PR_SKY - Work-Space pseudo-range residuals cartesian sky plot- (one plot per receiver) RES_O_PH_SKY - Output phase residuals cartesian sky plot- (one plot per receiver) RES_W_PH_SKY - Work-Space phase residuals cartesian sky plot- (one plot per receiver) RES_O_PR_SKYP - Output pseudo-range residuals polar sky plot- (one plot per receiver) RES_W_PR_SKYP - Work-Space pseudo-range residuals polar sky plot- (one plot per receiver) RES_O_PH_SKYP - Output phase residuals polar sky plot- (one plot per receiver) RES_W_PH_SKYP - Work-Space phase residuals polar sky plot- (one plot per receiver) PTH - Pressure / Temperature / Humidity - (one plot per receiver) NSAT - Number of satellite used (multi-receiver) NSATSS - Number of satellite used (sys by sys) - (one plot per receiver) NSATSSS - Smoothed number of satellite used (sys by sys) - (one plot per receiver) ZTD - Zenith Total Delay - (one plot for all the receivers) ZTD_VSH - Zenith Total Delay vs Height - (one plot for all the receivers) ZHD - Zenith Hydrostatic Delay - (one plot for all the receivers) ZWD - Zenith Wet Delay - (one plot for all the receivers) ZWD_VSH - Zenith Wet Delay vs Height - (one plot for all the receivers) PWV - Precipitable Water Vapour - (one plot for all the receivers) STD - Zenith Total Delay with slants - (one plot per receiver) RES_STD - Slants Total Delay residuals (polar plot) - (one plot per receiver) TGRAD - Tropospheric gradients table - Display a line of arrows (100) for each receiver indicating the direction and magnitude of the tropospheric gradient. This display function works best with ~45 receivers. Go back to the Index of contents","title":"SHOW"},{"location":"Command-language/#export","text":"This command is used to save on disk the results computed with goGPS. The tabs \"export\" in goInspector provides shortcuts to manually call the export methods. Command modifiers: CORE_MAT - Save the core object as .mat file - this object contains the entire status of the processing, including all the receivers, it is very useful to have it so that the results might be inspected in the future. This modifier ignores the target parameter. PLAIN_MAT - Save the receiver as plain .mat files (no objects) - this modifier is useful when the results of goGPS must be opened from other languages or older MATLABs, the receivers will be exported as a struct. REC_MAT - Receiver object as .mat file - similar to the previous modifier, this option allows to save any receiver as GNSS_Receiver object. REC_RIN - RINEX file containing the actual data stored in rec.work - this export can be useful to save filtered/synced receiver observations. All the applied PPP corrections and satellite clocks will be removed from the observations before the export. MP - Export the multipath maps stored in the GNSS_Station object. COO_CRD - Coordinates .CRD file - the median coordinates stored in the receiver will be saved in a file that can be used in the Receiver Info tab . XYZ_TXT - Coordinates XYZ in plain text format. ENU_TXT - Coordinates local ENU in plain text format. GEO_TXT - Coordinates Geodetic in plain text format. TRP_SNX - Tropo parameters (epoch, ZTD, Gradient North, Gradient East) as SINEX file. TRP_MAT - Tropo parameters (position, UTC time, ZTD, ZWD) as .mat file. TRP_CSV - Tropo parameters (epoch, ZTD, ZWD, Gradient East, Gradient North) as .csv file. TRP_HN - Tropo parameters as a HydroNet (CSV like) file. Go back to the Index of contents","title":"EXPORT"},{"location":"Command-language/#validation","text":"Go goGPS is probably the only GNSS processing software that includes functions for automatic comparison with Radiosondes and IGS official solutions (open an issue if this is wrong, I'm curious ^_^). At the moment it is possible to automatically make 3 automatic comparisons using the command VALIDATE .","title":"Validation"},{"location":"Command-language/#validate","text":"This command allows comparing the results obtained with goGPS with external sources. Be aware that the level and type of regularization chosen, the mapping function used for the tropospheric estimation, and multiple processing options may lead to different results. Comparing results with IGS official solutions have to be done mimicking as much as possible the processing done to obtain those results (same orbits, same mapping functions, same spline rate, ...) otherwise the validation only has a relative value. Command modifiers: -e=<\"name\"> - Export with name_postfix - if this flag is passed to the command SHOW the generated figures will be exported. \"name\" is optional and will be appended to an autogenerated name (stored in the UserData property of the MATLAB figure). Automatically goGPS will save the images in the out folder as \"PNG\" to request a different format \"name\" can be set to match a particular filetype (e.g. VALIDATE T* RAOB -e=\".pdf\" will save the images as PDF files, VALIDATE T* RAOB -e will save the validation results of all the receivers as PNG) -c - Close figure after export (valid only if the previous export modifier is present) IGS - Use IGS results for validation - this function generates a unique figure containing the statistics of mean and standard deviation for positions and tropospheric parameters for all the stations (the validation works only on IGS permanent stations) IGS_ZTD - Use IGS results for ZTD validation - for every IGS station processed the function will generate a plot with the ZTD estimated by goGPS and the official one of IGS, a table with all the statistics will be shown in the log, and a final map to recap the differences in terms of mean and standard deviation will be displayed. RAOB - Use RAOB for ZTD validation - for every radiosonde launching site the function will generate a plot with the ZTD estimated by goGPS and the one obtained by integration of the RAOB data, a table with all the statistics will be shown in the log, and a final map to recap the differences in terms of mean and standard deviation will be displayed. Radiosondes are usually launched from airports and not all the GNSS stations have close launching sites for making a comparison, goGPS will use the closest site or all the radiosondes falling in the area containing the processed receivers. The data needed by goGPS will be automatically downloaded from the University of Wyoming website. The ZTD computed by goGPS in the radiosonde launch site is obtained by natural interpolation with all the GNSS stations used for the validation. Note: all the radiosondes used for this validation are launched every day at 00 and 12 UTC, only two points per day will be available. Warning: The radiosonde ZTD is formed with the integration of a column of water vapor that might not be vertical in the presence of winds, making the value obtained different with respect to the one estimated by goGPS. To display this map run Radiosonde.showMap(Radiosonde.getRaobList) from the MATLAB command line. If anyone finds that a radiosonde site is missing in goGPS is invited to open a goGPS issue on GitHub. For a map with all the close radiosonde sites exec SHOW T* DTM_MAP_R on goGPS inspector. Go back to the Index of contents","title":"VALIDATE"},{"location":"Command-language/#ionospheric-interpolation","text":"In the beginning, goGPS have been created to work specifically with low-cost receivers, before 2019 most of them were single-frequency receivers and even today in 2020 most of the low-cost GNSS stations already deployed are not able to track more than one frequency. Having at least two different signals with different wave-lengths is important to compensate for ionospheric delays and apply PPP, to overcome this limit goGPS can interpolate ionospheric delays by using some reference receivers and then generate a synthetic set of L2 observations. All the interpolating techniques are based on the paper \"Satellite specific Epoch differenced Ionospheric Delay\" (Deng et al 2009)","title":"Ionospheric interpolation"},{"location":"Command-language/#seid","text":"The Satellite specific Epoch differenced Ionospheric Delay algorithm works satellite by satellite in the following way: 1. compute all the ionospheric piercing point (thin shell approximation) 2. compute the ionosphere from the geometry-free combination of the reference receivers 3. differentiate the ionosphere in time (i.e. compute the speed of variation) 4. compute the interpolated differenced ionosphere weighted on the inverse of the spherical distance on the target receivers 5. synthesize L2 by adding to L1 the integration of the interpolated values Usage example: Using 4 reference stations and one target to compute Precise Point Positioning with the paper version of SEID PINIT N5 FOR S* PAR T* LOAD T$ PREPRO T$ -s=G END SEID R1:4 T5 PLANE PPP T* END SHOW T* ZTD Command modifiers: PLANE - (flag) use a plane for the interpolation of the differenced geometry free, this is the original implementation as described in the paper but requires a minimum of 3 reference receivers. Go back to the Index of contents","title":"SEID"},{"location":"Command-language/#sid","text":"SID (Satellite specific Ionospheric Delay) is a modified version of the SEID approach, it does not use time differentiation. The interpolated ionosphere is computed jointly with a Least Squares (LS) adjustment taking as input both pseudo-range and carrier-phase Geometry-Free (GF) combinations, a bias parameter is added for each arc, and the rank-deficiency of the system is resolved by using a Lagrange multiplier (set the mean to the mean of the GF of code). Usage example: Using 4 reference stations and one target to compute Precise Point Positioning with SID approach PINIT N5 FOR S* PAR T* LOAD T$ PREPRO T$ -s=G END SID R1:4 T5 PLANE PPP T* END SHOW T* ZTD Go back to the Index of contents","title":"SID"},{"location":"Command-language/#remiono","text":"This command can be used similarly to SEID it has been created as an experimental Satellite specific Epoch differenced Ionospheric Delay algorithm, in addition to the original approach it tries to smooth the computed geometry-free. Instead of generating a synthetic L2 it removes the ionospheric delay to the phase observations of the target receiver. Without generating the second frequency it generally behaves worse than the previous approaches because outlier rejection works differently and a stronger regularization is required to have a comparable result, for these reasons the command is present but kept as experimental under testing. Go back to the Index of contents","title":"REMIONO"},{"location":"Command-language/#multipath-management","text":"goGPS integrates the possibility of creating and using multipath maps to mitigate the effect of reflections in the GNSS carrier-phase signals. We create our maps by processing a long period of data (10 days minimum are suggested) with the goGPS engine. From the obtained carrier phase residuals we can then generate maps of the common \"geographical\" errors in the polar coordinate system (e.g. Multipath effects coming from structures are always affecting the signals the same way, so each satellite transmitting from a certain elevation and angle is always affected by the same multipath disturbance). Multipath maps can be then used to mitigate the range errors allowing a better positioning. Our preliminary test shows that coordinates estimated for short sessions (e.g. every 15 minutes/hourly) can be improved by about 15-30% depending on the level of multipath. goGPS can apply multipath maps of RAW observations in the step of PREPRO , if maps of iono-free combinations are present they will be applied in the generation of the static PPP system, combined maps will not modify the observations directly. Before interpolating the residuals these are selected by filtering the worse observations, in particular in addition to the snooping methods applied in the PPP/NET solutions a 3sigma threshold is used to discard outliers. Residuals falling in a bin of 1 degree in latitude and 360 in longitude are used to evaluate latitude by latitude the variance of the residuals, all the observation above the 3sigma level are ignored in the interpolation process (about 1-1.5% of the data are usually disregarded). To regularize the solution for each cell of 1x1 degree with less than 2 observations 1 null pseudo-observation is added to the dataset to be interpolated. For each frequency (or combination) present in the receiver, a multi-step procedure is used to generate the goGPS multipath maps 1. Uncombined carrier-phase residuals are all used in a LS solution to compute the Zernike expansion coefficients up to degree 43 (can be changed in the code). These coefficients are then used to synthesize a map of 0.5x0.5 degree in the cartesian coordinate system elevation x azimuth (180x720). Zernike polynomials are good to map low degree changes on the disk (e.g. PCV) but for Multipath maps, a higher degree is preferable. Zernike polynomials are capable of describing changes in the signal depending on the distance from the center of the disk, with a radius close to 1, higher frequencies can be represented. In goGPS we perform 3 analyses at the same degree level using 3 mapping functions to map the elevation to the unitary radius so that we can better describe the undulations due to multipath. The two mapping functions are: MF1 = cos(el)^2 MF2 = sin(pi/2 * cos(el)^2) MF3 = sin(pi/2 * cos(el)) After a first analysis, the second is performed on the residuals of the first, and so the third. A synthetic final map is computed by adding the three matrixes. The figures show the maps retrieved from the first two iterations of the Zernike based interpolation for the WTZZ station. Stacking maps can be generated from the residuals of the previous step that provides an interpolation of the lower frequencies. The gridding procedure uses cells of 5 degrees in longitude and 1 in latitude, for each cell the mean is taken, each value is converted in polar coordinates and a final grid at the resolution of 0.5 degrees in cartesian coordinate (elevation x azimuth) is created by bi-linear interpolation in the polar coordinate system. These are the third iteration and the final gridding step on the residuals of the WTZZ station. At the end, the maps are summed all together to generate two possible applicable models, the first smoother, and the second containing the higher frequencies of the staking map. The user can decide the map that works best in his project by selecting it in the settings. On the left the smoother solution, on the right the highest details of the staking are preserved","title":"Multipath management"},{"location":"Command-language/#mpest","text":"The command MPEST can be used on a target receiver previously processed in PPP/NET with that still contains phase residuals. It automatically generates two maps for each observation combination (or RAW): one estimated from Zernike interpolation and the second by simple stacking. If multipath mitigation is enabled, and uncombined residuals are present, at the end of the computations, the command applies the corrections to the phase observations contained into the receiver. The result of the command is stored in the obj of class GNSS_Staion in the field ant_mp. Use EXPORT T* MP to export a multipath map. Usage example: Multipath maps creation PAR S* FOR T* LOAD T$ @30s PREPRO T$ -s=G PPP T$ -U END PUSHOUT T* END MPEST T* EXPORT T* MP Go back to the Index of contents","title":"MPEST"},{"location":"Command-language/#other-commands","text":"Additional commands may be used to do minor operations, such as clean part of the objects to free up space, rename receivers, compute simplified positions, or filter observations:","title":"Other Commands"},{"location":"Command-language/#rename","text":"Rename is a simple command that allows setting the Marker Name of a receiver, this may be useful when comparing the same receiver processed with different approaches Usage example: Suppose to compare the station ZIMM processed with GPS only, GLONASS only and Galileo only, one may rename the station, loaded tree times from the same RINEX file, as ZIMG, ZIMR, ZIME, to display different labels in the plot FOR S* LOAD T1 -s=G LOAD T2 -s=R LOAD T3 -s=E PREPRO T* PPP T* RENAME T1 ZIMG RENAME T2 ZIMR RENAME T3 ZIME END SHOW T* ZTD Go back to the Index of contents","title":"RENAME"},{"location":"Command-language/#empty","text":"This function resets the content of the target GNSS_Station like it was not yet loaded and processed freeing up all of the memory Usage example: Computing ZTD for 100 stations freeing the memory after export (one session) FOR S1 FOR T1:100 LOAD T$ PREPRO T$ PPP T$ EXPORT T$ TRP_SNX SHOW T$ ZTD -e -c EMPTY T$ END END Go back to the Index of contents","title":"EMPTY"},{"location":"Command-language/#emptywork","text":"This function resets the content of the Work-space (the current session) of the target GNSS_Station freeing up some of the memory occupied by the receiver Usage example: Computing PWV for 100 stations freeing the memory after export (multiple session) FOR S* FOR T1:100 LOAD T$ PREPRO T$ PPP T$ PUSHOUT T$ EMPTYWORK T$ END END SHOW T* PWV Go back to the Index of contents","title":"EMPTYWORK"},{"location":"Command-language/#emptyout","text":"This function resets the content of the Output object of the target GNSS_Station freeing up some of the memory occupied by the receiver Usage example: Computing two images of PWV comparison, one for the first 10 sessions one for the second 10 sessions FOR S1:10 FOR T* LOAD T$ PREPRO T$ PPP T$ PUSHOUT T$ EMPTYWORK T$ END END SHOW T* PWV -e FOR S11:20 FOR T* LOAD T$ PREPRO T$ PPP T$ PUSHOUT T$ EMPTYWORK T$ END END SHOW T* PWV -e Go back to the Index of contents","title":"EMPTYOUT"},{"location":"Command-language/#remtmp","text":"Similar to the EMPTYWORK command this function removes from the Work-Space all the data not needed for the push of the results, might be useful in parallel computations to limit the number of data saved on disk and to free some memory. Usage example: Computing ZWD for multiple parallel sessions. Remember that the PAR loop on sessions automatically execute PUSHOUT after loading the data processed by each slave and so it requires the object work to be exportable (EMPTYWORK cannot be used here) PINIT N5 PAR S* FOR T* LOAD T$ PREPRO T$ PPP T$ REMTMP T$ END END SHOW T* ZWD Go back to the Index of contents","title":"REMTMP"},{"location":"Command-language/#azel","text":"Compute Azimuth and elevation of a receiver, if a position has been computed or it's present in the coordinate file. Usage example: Computing azimuth and elevation to display a polar plot of the SNR of a receiver FOR S1 LOAD T1 AZEL T1 SHOW T1 SNR END Go back to the Index of contents","title":"AZEL"},{"location":"Command-language/#basicpp","text":"Compute a simple but fast code position on a target receiver without applying any range correction Usage example: Creating an a-priori coordinate file for all the receivers FOR S1 LOAD T* BASICPP T* EXPORT COO_CRD END Go back to the Index of contents","title":"BASICPP"},{"location":"Command-language/#codepp","text":"Running this command goGPS will compute a Code Positioning, this command does not perform any outlier rejection and does not apply any desync of the observations, it should not be used without running a pre-processing on the target receives. Usage example: CODEPP T1 Go back to the Index of contents","title":"CODEPP"},{"location":"Command-language/#outdet","text":"Perform outlier detection on phases, normally this is done in pre-processing but there are cases when this is useful, in fact, PPP and NET processing modify the status of the outliers. Usage example: In this case OUTDET is used to reset the flagged outliers at each iteration FOR S* LOAD T1 PREPRO T1 -s=G PPP T1 FOR T2:END P1 OUTDET T1 NET T1,$ R1 END PUSHOUT T$ END Go back to the Index of contents","title":"OUTDET"},{"location":"Command-language/#fixpos","text":"This command allows changing the reference coordinate type (by default it set the position as fixed). Command modifiers: FROM_WORK - (flag) use data from Work Space (current session) FROM_OUT - (flag) use data from Receiver Output object AS_APR - (flag) use position as a new a-priori position (not as fixed) Usage example: In this example a PPP solution is computed in the first session, later the other 29 sessions are processed with the fixed position of the first session FOR S1 LOAD T1 PREPRO T1 -s=G PPP T1 FIXPOS T1 END FOR S2:30 LOAD T1 PREPRO T1 -s=G PPP T1 END Go back to the Index of contents","title":"FIXPOS"},{"location":"Command-language/#keep","text":"This command can be used to remove some data from the receiver's work-space by telling goGPS what to keep. Command modifiers: @ - Rate in seconds (e.g. @30s, -r=30s) **-s= Active constellations (e.g. -s=GRE) **-e= Cut-off elevation in degree (e.g. -e=7) **-q= SNR threshold in dbHZ (e.g. -q=7) Usage example: Keep only observations of GPS satellites having elevation greater than 15deg KEEP T1 -s=G -e=15 Go back to the Index of contents","title":"KEEP"},{"location":"Command-language/#sync","text":"Syncronize all the receivers at the same rate, keeping only the epochs between the first and the last among all the receivers. Command modifiers: @ - Rate in seconds (e.g. @30s, -r=30s) Usage example: SYNC T* @60s Go back to the Index of contents","title":"SYNC"},{"location":"Command-language/#remsat","text":"Remove all the observations of a satellite from a target receiver. The function accepts a single list of satellites to be removed with the first letter of the constellation (GREJCI) and two digits for the PRN number. format: <1ch sat. sys. (GREJCI)><2ch sat. prn> Usage example: _Remove GPS satellite with PRN 4 or PRN 29, and the Galileo satellite with PRN 25. REMSAT T* G04,G29,E25 Go back to the Index of contents","title":"REMSAT"},{"location":"Command-language/#remobs","text":"Remove some observation types from a target receiver. format: <1ch obs. type (CPDS)><1ch freq><1ch tracking> Usage example: Remove from the first receiver all the doppler observations, the SNR of the second frequency and the second frequency of carrier-phases of the civilian tracking REMOBS T1 D,S2,L2C Go back to the Index of contents","title":"REMOBS"},{"location":"Home/","text":"goGPS 1.0 Open Edition Welcome to the goGPS wiki pages, here we will try to write useful information for users and developers. goGPS is a software created for processing GNSS raw data. It was originally written specifically to work with GPS single-frequency low-cost receivers but now it can fully exploit multi-constellation , multi-frequency , multi-tracking observations. goGPS implements multiple algorithms to analyze the data, and at the moment these include two main Least Squares (LS) engines: one working on combination of observables (e.g. iono-free observations) and one able to use all the frequencies and trackings logged without performing any combinations (ionospheric delay are parameters of the normal equations). The combined and uncombined engines can both compute Precise Point Positioning (PPP) solutions and Network adjustments (NET). Note: At the moment the software is focused on the processing of permanent stations (geodetic or low-cost) but it does not yet include the possibility to analyze moving receivers. Index of contents Introduction A bit of history About Installation Requirements Install procedure goGPS directories Execution Settings Index of contents Menu Sidebar Tabs Advanced Resources Commands Data Sources Receiver Info Pre-Processing Processing Parametrization PPP Parametrization Network Atmosphere Bottom Bar Command language Index of contents Receiver data organization Minimal script PUSHOUT How to select sessions How to select receivers Main commands LOAD PREPRO PPP NET Looping on receivers Parallel execution PINIT PKILL PAR Plots and export SHOW EXPORT Validation VALIDATE Ionospheric interpolation SEID SID REMIONO Multipath management MPEST Other Commands RENAME EMPTY EMPTYWORK EMPTYOUT AZEL BASICPP CODEPP OUTDET FIXPOS KEEP SYNC REMSAT REMOBS REMTMP How to create a new project Coding goGPS For a bit old presentation on the goGPS coding have a look at this presentation: Coding goGPS","title":"goGPS 1.0 Open Edition"},{"location":"Home/#gogps-10-open-edition","text":"Welcome to the goGPS wiki pages, here we will try to write useful information for users and developers. goGPS is a software created for processing GNSS raw data. It was originally written specifically to work with GPS single-frequency low-cost receivers but now it can fully exploit multi-constellation , multi-frequency , multi-tracking observations. goGPS implements multiple algorithms to analyze the data, and at the moment these include two main Least Squares (LS) engines: one working on combination of observables (e.g. iono-free observations) and one able to use all the frequencies and trackings logged without performing any combinations (ionospheric delay are parameters of the normal equations). The combined and uncombined engines can both compute Precise Point Positioning (PPP) solutions and Network adjustments (NET). Note: At the moment the software is focused on the processing of permanent stations (geodetic or low-cost) but it does not yet include the possibility to analyze moving receivers.","title":"goGPS 1.0 Open Edition"},{"location":"Home/#index-of-contents","text":"Introduction A bit of history About Installation Requirements Install procedure goGPS directories Execution Settings Index of contents Menu Sidebar Tabs Advanced Resources Commands Data Sources Receiver Info Pre-Processing Processing Parametrization PPP Parametrization Network Atmosphere Bottom Bar Command language Index of contents Receiver data organization Minimal script PUSHOUT How to select sessions How to select receivers Main commands LOAD PREPRO PPP NET Looping on receivers Parallel execution PINIT PKILL PAR Plots and export SHOW EXPORT Validation VALIDATE Ionospheric interpolation SEID SID REMIONO Multipath management MPEST Other Commands RENAME EMPTY EMPTYWORK EMPTYOUT AZEL BASICPP CODEPP OUTDET FIXPOS KEEP SYNC REMSAT REMOBS REMTMP How to create a new project","title":"Index of contents"},{"location":"Home/#coding-gogps","text":"For a bit old presentation on the goGPS coding have a look at this presentation: Coding goGPS","title":"Coding goGPS"},{"location":"How-to-create-a-new-project/","text":"How to create a new project The easiest way to create a new goGPS project is by using the provided GUI or copying another existing project. Open the goGPS interface by executing goGPS in the MATLAB Command Window. From the Menu choose Project -> New goGPS will open this window: Fill all the fields. Project Time - Select the type of project that you want to create, depending on this choice the settings of the new project will be adjusted to a suggested configuration. The possible choices are four: PPP Precise Point Positioning NET (short baselines) no iono - no tropo NET (medium baselines) no iono NET (long baselines) iono - free network Where to create - select the directory that will contain the new project folder Project Name - Provide a name for the new project (this will be also the name of the project folder) Observations folder - select the directory in which the observations are stored, a subfolder structure can be present (e.g. RINEX/YEAR/DOY/RINEX_FILE_NAME.YYO ) and the operation to perform: Copy the observations folder into the new project Move the observations folder into the new project Keep observations in the current folder Do not add any receiver now Press \"Create New Project\". If no errors will occur, the project will be created and the goGPS interface for editing settings will be refreshed with the new parameters. At this point, the new project can be customized and executed. Useful links Wiki settings page - for the meaning of all the parameters Wiki Command language page - for a description of all the available commands Tip A goGPS project is usually stored in a folder with a fixed structure, although all the directories could be changed in the settings file, we suggest to keep the original structure (see the section Directories of goGPS ). Ephemerides and external resources can be stored within the project folder, but since the same resource could be used in different projects we keep them in folders common among all the projects.","title":"How to create a new project"},{"location":"How-to-create-a-new-project/#how-to-create-a-new-project","text":"The easiest way to create a new goGPS project is by using the provided GUI or copying another existing project. Open the goGPS interface by executing goGPS in the MATLAB Command Window. From the Menu choose Project -> New goGPS will open this window: Fill all the fields. Project Time - Select the type of project that you want to create, depending on this choice the settings of the new project will be adjusted to a suggested configuration. The possible choices are four: PPP Precise Point Positioning NET (short baselines) no iono - no tropo NET (medium baselines) no iono NET (long baselines) iono - free network Where to create - select the directory that will contain the new project folder Project Name - Provide a name for the new project (this will be also the name of the project folder) Observations folder - select the directory in which the observations are stored, a subfolder structure can be present (e.g. RINEX/YEAR/DOY/RINEX_FILE_NAME.YYO ) and the operation to perform: Copy the observations folder into the new project Move the observations folder into the new project Keep observations in the current folder Do not add any receiver now Press \"Create New Project\". If no errors will occur, the project will be created and the goGPS interface for editing settings will be refreshed with the new parameters. At this point, the new project can be customized and executed.","title":"How to create a new project"},{"location":"How-to-create-a-new-project/#useful-links","text":"Wiki settings page - for the meaning of all the parameters Wiki Command language page - for a description of all the available commands","title":"Useful links"},{"location":"How-to-create-a-new-project/#tip","text":"A goGPS project is usually stored in a folder with a fixed structure, although all the directories could be changed in the settings file, we suggest to keep the original structure (see the section Directories of goGPS ). Ephemerides and external resources can be stored within the project folder, but since the same resource could be used in different projects we keep them in folders common among all the projects.","title":"Tip"},{"location":"Installation/","text":"Requirements goGPS have been developed to work in MATLAB environment, it specifically avoids to use any non-free toolboxes and mex-functions to avoid compilation and additional requirements. A full license of MATLAB is needed to run the software from code, although in future compiled versions of goGPS will be released so that they will just require the free MATLAB runtime libraries. List of minimum software requirements: MATLAB 2016a (needed for the extended usage of newer functions such as 'movmedian', 'movstd', ...) GUI Layout Toolbox (free toolbox - needed for the graphical user interface) Additional requirements: LAMBDA v3 (unfortunately the redistribution of this useful set of algorithms to fix integer ambiguities cannot be re-distributed but a copy can be requested on curtin webpage ) aria2 (needed for speedup automatic downloads, a compiled version for windows is included in the goGPS package) Google Maps API - to use Google Maps the user API key must be copied into a .mat file <install_dir>/goGPS/utility/thirdParty/plotGoogleMap/api_key.mat , this is a MATLAB file containing a single string variable called apiKey containing the string of your API KEY. (If you don't have an API key request it here ) Third-party functions included in goGPS: A full set of additional third-party functions can be found in the folder goGPS/utility/thirdParty they are redistributed with this software together with their license. Many thanks to all the developers sharing their work for the entire community! Installation The best way to try goGPS at the moment is through the GitHub repository that is continuously updated. When any bug is found and reported on GitHub we try to fix it as fast as we can. Clone the repo in the folder you prefer, either by the standard git clone command git clone https://github.com/goGPS-Project/goGPS_MATLAB.git goGPS_MATLAB , or by using your preferred Git client (e.g. Github Desktop, GitKraken, SourceTree, ...) Install GUI Layout Toolbox . It will be automatically prompted at the first execution of goGPS GUI Request LAMBDA v3 to have its support for Integer Ambiguity Fixing copy the LAMBDA folder into <install_dir>/goGPS/positioning/lambda/lambda_v3 Download and install aria2 for faster downloads Windows : nothing to do (a version of aria2 is already included in goGPS) Linux (Debian based): sudo apt-get install aria2 Mac OS (Using brew ): brew install aria2 Directories of goGPS When a clone of the repository is downloaded from GitHub a set of folders will appear in the installation dir. docs - contains a collection of some files useful for the development of goGPS icons - contains the set of icons to be used by the logging window goGPS - is the main folder containing the goGPS code data - is the folder where projects and resources are usually stored A more detailed description of the dir structure of goGPS can be read in this nfo file: dir_structure.nfo goGPS_MATLAB \u2502 \u251c\u2500 DOCS // Collection of some files useful for the development of goGPS \u2502 \u251c\u2500 goGPS // Main folder containing the goGPS code \u2502 \u251c\u2500 last_settings.ini // Store the latest setting in use \u2502 \u251c ... \u2502 \u2514 ... \u2502 \u251c\u2500 ICONS // Icon set for the log window \u2502 \u2514\u2500 DATA \u2502 \u251c\u2500 Antenna \u2502 \u251c\u2500 ATX // ANTEX file \u2502 \u2514\u2500 MP // Multipath maps \u2502 \u251c\u2500 Satellite \u2502 \u251c\u2500 CLK // clk files \u2502 \u251c\u2500 EPH // Ephemeris files (e.g. igs SP3 files) \u2502 \u251c\u2500 CRX // CRX files storing Satellite problems \u2502 \u251c\u2500 ATM // Atmospheric error grids / models \u2502 \u251c\u2500 SBAS // Downloaded SBAS data \u2502 \u2502 \u2514\u2500 EMS // EMS files from the EGNOS Message Server, via Internet \u2502 \u2514\u2500 DCB // Differential code biases \u2502 \u251c\u2500 Reference \u2502 \u251c\u2500 Geoid // Geoids for orthometric correction \u2502 \u2514\u2500 DTM // DTM for reference altitude \u2502 \u251c\u2500 Station \u2502 \u251c\u2500 station_info.ini // Info of the station \u2502 \u251c\u2500 network_info.ini // Info of the network (FTP info) \u2502 \u251c\u2500 < MET > // Meteorological data files \u2502 \u251c\u2500 < CRD > // Permanent station positions \u2502 \u251c\u2500 < SNX > // Sinex files, global solutions \u2502 \u2514\u2500 < Ocean > // Computed ocean loading \u2502 \u2514\u2500 Project \u2514\u2500 TestName // Storing a project \u251c\u2500 Config \u2502 \u2514\u2500 config.ini // config file of the project \u2502 // (storing ALL the goGPS parameters) \u2502 \u251c\u2500 RINEX // All the RINEX files of the project \u2502 \u2514\u2500 < Year > // Year corresponding to GPS time \u2502 \u2514\u2500 DOY // DOY corresponding to GPS time \u2502 \u251c\u2500 < Ref_path > // <opt> reference paths \u2502 \u251c\u2500 < Antenna > // <opt> use the global dir if not present \u2502 \u251c\u2500 < ATX > // <opt> use the global dir if not present \u2502 \u2502 \u2514\u2500 < custom > // <opt> put custom .ATX here \u2502 \u2514\u2500 <MP> // Multipath maps \u2502 \u251c\u2500 < Stations > // <opt> use the global dir if not present \u2502 \u251c\u2500 < CRD > // <opt> use the global dir if not present \u2502 \u251c\u2500 < MET > // <opt> Meteorological data files \u2502 \u2514\u2500 < Ocean > // <opt> use the global dir if not present \u2502 \u2514 Out Execution To use go GPS you just need to move into goGPS folder and execute goGPS Move into goGPS folder cd <install_dir>/goGPS Execute goGPS If everything works a GUI like this should appear on your screen:","title":"Installation"},{"location":"Installation/#requirements","text":"goGPS have been developed to work in MATLAB environment, it specifically avoids to use any non-free toolboxes and mex-functions to avoid compilation and additional requirements. A full license of MATLAB is needed to run the software from code, although in future compiled versions of goGPS will be released so that they will just require the free MATLAB runtime libraries.","title":"Requirements"},{"location":"Installation/#list-of-minimum-software-requirements","text":"MATLAB 2016a (needed for the extended usage of newer functions such as 'movmedian', 'movstd', ...) GUI Layout Toolbox (free toolbox - needed for the graphical user interface)","title":"List of minimum software requirements:"},{"location":"Installation/#additional-requirements","text":"LAMBDA v3 (unfortunately the redistribution of this useful set of algorithms to fix integer ambiguities cannot be re-distributed but a copy can be requested on curtin webpage ) aria2 (needed for speedup automatic downloads, a compiled version for windows is included in the goGPS package) Google Maps API - to use Google Maps the user API key must be copied into a .mat file <install_dir>/goGPS/utility/thirdParty/plotGoogleMap/api_key.mat , this is a MATLAB file containing a single string variable called apiKey containing the string of your API KEY. (If you don't have an API key request it here )","title":"Additional requirements:"},{"location":"Installation/#third-party-functions-included-in-gogps","text":"A full set of additional third-party functions can be found in the folder goGPS/utility/thirdParty they are redistributed with this software together with their license. Many thanks to all the developers sharing their work for the entire community!","title":"Third-party functions included in goGPS:"},{"location":"Installation/#installation","text":"The best way to try goGPS at the moment is through the GitHub repository that is continuously updated. When any bug is found and reported on GitHub we try to fix it as fast as we can. Clone the repo in the folder you prefer, either by the standard git clone command git clone https://github.com/goGPS-Project/goGPS_MATLAB.git goGPS_MATLAB , or by using your preferred Git client (e.g. Github Desktop, GitKraken, SourceTree, ...) Install GUI Layout Toolbox . It will be automatically prompted at the first execution of goGPS GUI Request LAMBDA v3 to have its support for Integer Ambiguity Fixing copy the LAMBDA folder into <install_dir>/goGPS/positioning/lambda/lambda_v3 Download and install aria2 for faster downloads Windows : nothing to do (a version of aria2 is already included in goGPS) Linux (Debian based): sudo apt-get install aria2 Mac OS (Using brew ): brew install aria2","title":"Installation"},{"location":"Installation/#directories-of-gogps","text":"When a clone of the repository is downloaded from GitHub a set of folders will appear in the installation dir. docs - contains a collection of some files useful for the development of goGPS icons - contains the set of icons to be used by the logging window goGPS - is the main folder containing the goGPS code data - is the folder where projects and resources are usually stored A more detailed description of the dir structure of goGPS can be read in this nfo file: dir_structure.nfo goGPS_MATLAB \u2502 \u251c\u2500 DOCS // Collection of some files useful for the development of goGPS \u2502 \u251c\u2500 goGPS // Main folder containing the goGPS code \u2502 \u251c\u2500 last_settings.ini // Store the latest setting in use \u2502 \u251c ... \u2502 \u2514 ... \u2502 \u251c\u2500 ICONS // Icon set for the log window \u2502 \u2514\u2500 DATA \u2502 \u251c\u2500 Antenna \u2502 \u251c\u2500 ATX // ANTEX file \u2502 \u2514\u2500 MP // Multipath maps \u2502 \u251c\u2500 Satellite \u2502 \u251c\u2500 CLK // clk files \u2502 \u251c\u2500 EPH // Ephemeris files (e.g. igs SP3 files) \u2502 \u251c\u2500 CRX // CRX files storing Satellite problems \u2502 \u251c\u2500 ATM // Atmospheric error grids / models \u2502 \u251c\u2500 SBAS // Downloaded SBAS data \u2502 \u2502 \u2514\u2500 EMS // EMS files from the EGNOS Message Server, via Internet \u2502 \u2514\u2500 DCB // Differential code biases \u2502 \u251c\u2500 Reference \u2502 \u251c\u2500 Geoid // Geoids for orthometric correction \u2502 \u2514\u2500 DTM // DTM for reference altitude \u2502 \u251c\u2500 Station \u2502 \u251c\u2500 station_info.ini // Info of the station \u2502 \u251c\u2500 network_info.ini // Info of the network (FTP info) \u2502 \u251c\u2500 < MET > // Meteorological data files \u2502 \u251c\u2500 < CRD > // Permanent station positions \u2502 \u251c\u2500 < SNX > // Sinex files, global solutions \u2502 \u2514\u2500 < Ocean > // Computed ocean loading \u2502 \u2514\u2500 Project \u2514\u2500 TestName // Storing a project \u251c\u2500 Config \u2502 \u2514\u2500 config.ini // config file of the project \u2502 // (storing ALL the goGPS parameters) \u2502 \u251c\u2500 RINEX // All the RINEX files of the project \u2502 \u2514\u2500 < Year > // Year corresponding to GPS time \u2502 \u2514\u2500 DOY // DOY corresponding to GPS time \u2502 \u251c\u2500 < Ref_path > // <opt> reference paths \u2502 \u251c\u2500 < Antenna > // <opt> use the global dir if not present \u2502 \u251c\u2500 < ATX > // <opt> use the global dir if not present \u2502 \u2502 \u2514\u2500 < custom > // <opt> put custom .ATX here \u2502 \u2514\u2500 <MP> // Multipath maps \u2502 \u251c\u2500 < Stations > // <opt> use the global dir if not present \u2502 \u251c\u2500 < CRD > // <opt> use the global dir if not present \u2502 \u251c\u2500 < MET > // <opt> Meteorological data files \u2502 \u2514\u2500 < Ocean > // <opt> use the global dir if not present \u2502 \u2514 Out","title":"Directories of goGPS"},{"location":"Installation/#execution","text":"To use go GPS you just need to move into goGPS folder and execute goGPS Move into goGPS folder cd <install_dir>/goGPS Execute goGPS If everything works a GUI like this should appear on your screen:","title":"Execution"},{"location":"Introduction/","text":"goGPS 1.0 OPEN Edition A MATLAB software for the processing of static GNSS receivers goGPS is a software created for processing GNSS raw data. It was originally written specifically to work with GPS single-frequency low-cost receivers but now it can fully exploit multi-constellation , multi-frequency , multi-tracking observations. goGPS implements multiple algorithms to analyze the data, and at the moment these include two main Least Squares (LS) engines: one working on combination of observables (e.g. iono-free observations) and one able to use all the frequencies and trackings logged without performing any combinations (ionospheric delay are parameters of the normal equations). The combined and uncombined engines can both compute Precise Point Positioning (PPP) solutions and Network adjustments (NET). Note: At the moment the software is focused on the processing of permanent stations (geodetic or low-cost) but it does not yet include the possibility to analyze moving receivers. A bit of history a not very useful tale by Andrea Gatti Disclaimer : I'm writing the story as I remember it, I joined the development later and so I may skip many important points but I hope someone will correct and/or expand my narration in the future (this is a wiki). It was the year 2007 at Politecnico di Milano - Como campus, in the beginning, there was a set of routines used to teach the students GPS data processing and Kalman filtering. At that time Mirko Reguzzoni and Eugenio Realini started to believe that there could have been space for a new GPS processing software based on MATLAB language. With the help of some students (the founding fathers), they started working on the creation of a complete software exploiting the Kalman filter approach (KF). The first release of goGPS dates back to 2009 when the code was released under GPL and uploaded on the SourceForge platform. The software was used at the university and started to receive contributions from different parts of the World. In the meantime, Eugenio after defending his Ph.D. thesis on goGPS moved to Japan for a post-doc focused on tropospheric studies, there he wrote most of the code necessary for computing PPP solutions. In 2014 Eugenio came back to Italy to join some of his ex-colleagues at Politecnico in a spin-off called GReD and released a first-version able to perform precise point positioning with a Kalman Filter approach. When I started working on goGPS at the end of 2016, the software used a fixed data structure that limited the usage of a maximum of two frequencies and was not ready for the modern constellations. It was very complicated to expand it or modify the processing sequence; what started as a performance improvement soon became a total rewrite of the software. I decided to use object-oriented programming for greater flexibility and modularity but the Kalman filter approach was still a limiting performance factor (MATLAB is notoriously slower in performing iterative processing). Eugenio made some preliminary tests on a batch least-square (LS) engine using differenced and combined observations that were very promising, so when Giulio Tagliaferro joined the team of GReD and we had to develop a new engine he proposed and wrote a first undifferenced batch processor that is still the core behind goGPS pre-processing. MATLAB excels in working with matrixes and the new engine is much faster than the old one with KF, but we were always working with post-processing of quasi-static (permanent) stations, and we optimized the processing for them, now we no longer support moving receivers. In 2018 I left Politecnico and joined GReD; since then 99% of the current development is supported by our spin-off. In the last year, Giulio and I took care of most of the development, improving the software that now has very few lines of code in common with the original version. The last release with KF is 0.5.x and can be found now in the legacy branch. The new 1.0 release (expected for the beginning of 2020) is a completely new software with two engines (combined and uncombined) able to perform PPP and Network adjustments that can be easily expanded to support other approaches and be the base for testing new ideas. About List of the contributors of the original goGPS Developers of the original core: Mirko Reguzzoni Eugenio Realini Founding fathers: Alessio Dominioni Roberto Terruzzi Marco Colla Marcello Palmulli Michele Tettamanti Contributors (in temporal order): Sara Lucca Lisa Pertusini Daniele Sampietro Luana Valentini Alemu Befkadu Nigussie Ivan Reguzzoni Stefano Caldera Damiano Triglione Giuliano Sirioni Antonio Herrera Olmo Andrea Gatti Hendy F. Suhandri Andrea Nardo Daisuke Yoshida Marco Negretti Yuya Iwaki Louis Osei-Poku Paiyuan Zhou List of the contributors of the new goGPS 1.0 Developers of the new goGPS core: Andrea Gatti Giulio Tagliaferro Other Contributors: Eugenio Realini Stefano Caldera Lisa Pertusini Andreas Krietemeyer Alice Bonfiglio Stefano Barindelli Alessandra Mascitelli","title":"goGPS 1.0 OPEN Edition"},{"location":"Introduction/#gogps-10-open-edition","text":"","title":"goGPS 1.0 OPEN Edition"},{"location":"Introduction/#a-matlab-software-for-the-processing-of-static-gnss-receivers","text":"goGPS is a software created for processing GNSS raw data. It was originally written specifically to work with GPS single-frequency low-cost receivers but now it can fully exploit multi-constellation , multi-frequency , multi-tracking observations. goGPS implements multiple algorithms to analyze the data, and at the moment these include two main Least Squares (LS) engines: one working on combination of observables (e.g. iono-free observations) and one able to use all the frequencies and trackings logged without performing any combinations (ionospheric delay are parameters of the normal equations). The combined and uncombined engines can both compute Precise Point Positioning (PPP) solutions and Network adjustments (NET). Note: At the moment the software is focused on the processing of permanent stations (geodetic or low-cost) but it does not yet include the possibility to analyze moving receivers.","title":"A MATLAB software for the processing of static GNSS receivers"},{"location":"Introduction/#a-bit-of-history","text":"a not very useful tale by Andrea Gatti Disclaimer : I'm writing the story as I remember it, I joined the development later and so I may skip many important points but I hope someone will correct and/or expand my narration in the future (this is a wiki). It was the year 2007 at Politecnico di Milano - Como campus, in the beginning, there was a set of routines used to teach the students GPS data processing and Kalman filtering. At that time Mirko Reguzzoni and Eugenio Realini started to believe that there could have been space for a new GPS processing software based on MATLAB language. With the help of some students (the founding fathers), they started working on the creation of a complete software exploiting the Kalman filter approach (KF). The first release of goGPS dates back to 2009 when the code was released under GPL and uploaded on the SourceForge platform. The software was used at the university and started to receive contributions from different parts of the World. In the meantime, Eugenio after defending his Ph.D. thesis on goGPS moved to Japan for a post-doc focused on tropospheric studies, there he wrote most of the code necessary for computing PPP solutions. In 2014 Eugenio came back to Italy to join some of his ex-colleagues at Politecnico in a spin-off called GReD and released a first-version able to perform precise point positioning with a Kalman Filter approach. When I started working on goGPS at the end of 2016, the software used a fixed data structure that limited the usage of a maximum of two frequencies and was not ready for the modern constellations. It was very complicated to expand it or modify the processing sequence; what started as a performance improvement soon became a total rewrite of the software. I decided to use object-oriented programming for greater flexibility and modularity but the Kalman filter approach was still a limiting performance factor (MATLAB is notoriously slower in performing iterative processing). Eugenio made some preliminary tests on a batch least-square (LS) engine using differenced and combined observations that were very promising, so when Giulio Tagliaferro joined the team of GReD and we had to develop a new engine he proposed and wrote a first undifferenced batch processor that is still the core behind goGPS pre-processing. MATLAB excels in working with matrixes and the new engine is much faster than the old one with KF, but we were always working with post-processing of quasi-static (permanent) stations, and we optimized the processing for them, now we no longer support moving receivers. In 2018 I left Politecnico and joined GReD; since then 99% of the current development is supported by our spin-off. In the last year, Giulio and I took care of most of the development, improving the software that now has very few lines of code in common with the original version. The last release with KF is 0.5.x and can be found now in the legacy branch. The new 1.0 release (expected for the beginning of 2020) is a completely new software with two engines (combined and uncombined) able to perform PPP and Network adjustments that can be easily expanded to support other approaches and be the base for testing new ideas.","title":"A bit of history"},{"location":"Introduction/#about","text":"","title":"About"},{"location":"Introduction/#list-of-the-contributors-of-the-original-gogps","text":"Developers of the original core: Mirko Reguzzoni Eugenio Realini Founding fathers: Alessio Dominioni Roberto Terruzzi Marco Colla Marcello Palmulli Michele Tettamanti Contributors (in temporal order): Sara Lucca Lisa Pertusini Daniele Sampietro Luana Valentini Alemu Befkadu Nigussie Ivan Reguzzoni Stefano Caldera Damiano Triglione Giuliano Sirioni Antonio Herrera Olmo Andrea Gatti Hendy F. Suhandri Andrea Nardo Daisuke Yoshida Marco Negretti Yuya Iwaki Louis Osei-Poku Paiyuan Zhou","title":"List of the contributors of the original goGPS"},{"location":"Introduction/#list-of-the-contributors-of-the-new-gogps-10","text":"Developers of the new goGPS core: Andrea Gatti Giulio Tagliaferro Other Contributors: Eugenio Realini Stefano Caldera Lisa Pertusini Andreas Krietemeyer Alice Bonfiglio Stefano Barindelli Alessandra Mascitelli","title":"List of the contributors of the new goGPS 1.0"},{"location":"Settings/","text":"goGPS Settings The settings for running a project in goGPS are completely stored in a unique text file (.ini). This is fully mapped to an object instance of a class Main_Settings and always automatically exported with all the comments necessary to understand the meaning of the parameters. The .ini file can be edited using a normal text editor and passed to goGPS to run automatically. You can also modify 99% of the settings using the goGPS Edit GUI that will be automatically loaded on goGPS start, the remaining 1% of the settings can be found together with the plain text ini file in the Advanced TAB of the interface. In the following sections, it is possible to find a description of all the elements present in the current goGPS Edit Settings Interface and the corresponding parameter present in the setting file. Index of contents The goGPS Edit interface is structured with a Menu, a Main SideBar, a list of Tabs and a bar in the bottom: Menu Sidebar Tabs Tab Advanced Tab Resources Tab Commands Tab Data Sources Tab Receiver Info Tab Pre-Processing Tab Processing Tab Parametrization PPP Tab Parametrization Network Tab Atmosphere Bottom bar Note: In the main window flags on the left of file or directory paths indicate if the file/directory exists or if it is missing Menu The goGPS menu allows performing simple operations and opening tools or other windows. It is still under development and will be expanded in the future. At the moment it allows to do the following operations: goGPS About open the about window Options contains a set of combo modifier of all the settings to perform basic processing Set for PPP troposphere estimation Set for NET solution (short baselines - ignore ionosphere - ignore troposphere) Set for NET solution (medium baselines < 20km - ignore ionosphere) Set for NET solution (long baselines - iono-free) Project New open a window to create a new project. The automatic procedure will guide the user to generate a project folder with its main structure and a new generic settings file. Load load a .ini config file Save save the current configuration on the current .ini file, the current file is displayed in the bar at the bottom of the interface. Save As save the current configuration at the given location Go back to the Index of contents Sidebar On the left side of goGPS Edit Interface, there is a side-bar containing basic information about the data that will be available for processing. A section dedicated to the processing sessions is located at the top, it contains: a Check button to update the Session limits in the case they are not automatically updated First and Last epoch to be processed Duration (length) of each single session Buffer dimension in seconds of the data intervals to be used in addition to one of the sessions. (e.g. with a session of 86400 seconds - one day - and buffers of 10800 seconds - 3 hours - a total of 30 hours of data will be processed for each session, each session will overlap with the next, thus allowing a smoother estimation of tropospheric parameters and a better arc ambiguity estimation) A section dedicated to the receiver list is at the bottom of the sidebar. There you can find 3 buttons: Check to refresh the list of receivers when is not automatically updated Plot to generate a plot showing the period covered by each RINEX file that will be used for the project Trackings to generate a table displaying all the code observation types tracked (works best on RINEX 3 files, this tool is still experimental) Below there is a list of all the stations of the project. For each station, two columns are reporting how many requested files are present or missing (e.g. in the processing of 1 month of daily files some of the RINEX could be missing) Go back to the Index of contents Tabs At the right of the sidebar, some tabs are containing the various global settings that can be defined Tab Advanced This tab is used to change all the settings including the hidden ones. In the editor a copy of the current ini config file is present and it can be modified directly. Two buttons are used to refresh the UI when the ini file is changed. Communication dir is the directory used by goGPS parallelism to communicate with the slave processors. This must be seen by all the Slave processes and the Master (a.k.a. the MATLAB process running the full goGPS) Go back to the Index of contents Tab Resources The Resource tab contains all the settings defining the kind of orbits that need to be used, and the location of all the downloadable resources. Note: the Antenna file, the Geoid, and the Geomagnetic reference field are provided together with the code of goGPS, and updated constantly on the GitHub repository, while all the other resources are automatically downloaded and saved into the specified folders by goGPS (if the download flag is checked). In this tab many commands and fields are present, the first information that can be seen here is the location of the remote_resources.ini file that can be found at the top of the tab. This resource file contains all the information needed to find and download a goGPS resource (e.g. orbits, clock errors, Vienna Mapping Functions), together with their names. Generally, this file must never be changed, a more detailed guide on about file will be added to this wiki. To use orbits or other resources from a center not available in the list of goGPS centers the remote_resource.ini file must be modified manually (if you have a center to suggest and want it to be added to the remote_resource file open a ticket in GitHub and we will add it as soon as we can). List of commands/fields: \"Allow automatic download [...]\" - this command is a flag, if enabled it allows goGPS to search for the resources it needs online (always recommended) Center pop-up list - this control allow the select the kind of resources/provider to be used, the main centers are already available in goGPS: IGS, EMR, ESOC, JAXA, CODE, ... at the left of the command, the list of supported constellations is reported for the active choice. E.g. selecting JAXA the supported constellations are \"GRJ\", each letter represents a constellation: G GPS (US) R GLONASS (Russia) E Galileo (EU) J QZSS (Japan) C Beidou (China) I IRNSS (India) \"Center orbit type preference\" - contains a set of flags to specify the kind of orbit to be used. If more choices are selected the leftmost resource is the primary choice, when a type of resource (e.g. final orbits) is not present (even on a remote server) the next best solution is the one that will be used (e.g. rapid orbits) \"Center iono type preference\" - similarly to the orbits different types of ionospheric models are available with descending quality from left to right \"Resource tree inspector\" - this field cannot be modified, it just shows the remote location of all the resources that are required. All the information it displays are built on run-time from the remote_resource.ini file \"Reset all resources path\" - this button comes in handy when importing a project from another computer, in the settings file the location of the resources may be expressed as a full path and it might be no longer existing in the importing computer. Pressing this button all the resources paths will be reset to their default values. The green/red flags shown in this tab are useful to understand if a file/folder is missing. Below the button follows the list of all the local paths of the resources. Special time keywords can be used in the paths, they will automatically take all the values they can assume in the sessions span: ${WWWW} 4 char GPS week ${WWWWD} 4+1 char GPS week + day of the week ${D} 1 char day of the week ${3H} 2 char GPS hour (00, 03, 06, 09, 12, 15, 18, 21) ${6H} 2 char GPS hour (00, 06, 12, 18) ${HH} 2 char GPS hour ${QQ} 2 char GPS quarter of hour (00, 15, 30, 45) ${5M} 2 char GPS five minutes (05, 10, ... , 55) ${YYDOY} 2+3 char GPS year + day of year ${YYYY} 4 char GPS year ${YY} 2 char GPS year ${MM} 2 char GPS month ${DD} 2 char GPS day ${DOY} 3 char GPS day of the year ${S} 1 char session \"Antenna (ATX) filename\" - here the user has to set the path that points to the antenna file (usually the last IGS file available). This file contains information about Phase Center Offsets (PCOs) and Phase Center Variations (PCVs) of the antennas of the satellites and the receivers. It is a mandatory file, without it, the error in computing a solution can be extremely high. When the antenna for a certain receiver is not found with the proper radome the \"NONE\" radome is used instead. If no information about a frequency is found the data corresponding to the closest frequency will be used. If no information about a constellation is found the data corresponding to GPS with the closest frequency will be used. Note: additional antenna files (in ANTEX format) with custom values can be passed to goGPS, to load them they must be saved into a folder contained in the home of the project you are running, this folder is <prj_home>/station/ATX/custom/ , the file can have any name but its extension must be .ATX . \"Geoid local path\" - in this line the user has to set the location of the geoid grid file (in MATLAB .mat format) used to compute orthometric heights, note that passing a grid of a quasigeoid in here will lead to use normal heights (look at Vanicek et al 2012 for more info). For 99.9% of the processing, the included goGPS grid of EGM2008 is more than enough; when a point does not fall on the exact knot of the grid a bilinear (or cubic) interpolation is performed. \"CRX path\" - this is the path to the folder containing CRX files (satellite problem file), these are automatically downloaded from the CODE FTP server, they contain useful information on the status of the satellites (maneuvers, outage, and other unusual behaviors). \"Eph local dir\" - orbits ephemerides are loaded from their standard exchange format SP3, this is the location of storage of them, the name of the orbit is automatically generated depending on the selected \"center orbit type\". The orbits are automatically downloaded in the right location by goGPS but it is possible to put them manually in their local location. \"Clk local dir\" - similar to the ephemeris path this is the path of the corresponding clock file of the orbits. Some orbits have different clock files (e.g. @30 seconds, @5 seconds) they are chosen with the priority sequence listed into the remote_resource file. Generally, also this path must not be changed, goGPS will try to download the resources it needs by itself. \"ERP local dir\" - this is the folder containing the Earth Rotation Parameter files to be used together with their corresponding orbits. \"IONO local path\" - this points to the local folder where ionospheric models will be downloaded by goGPS. They can be used to reduce the ionospheric delay to allow a better single-frequency positioning or to just help convergence and improve interpolation techniques. \"IGRF local path\" - this is the folder pointing to the International Geomagnetic Reference Field Schmidt semi-normalized spherical harmonic coefficients, usually the user does not need to change this files or folder cause they are provided together with the goGPS code. \"DCB local path\" - this points to the local folder where the Differential Code Biases will be downloaded by goGPS. Differential Code Biases are automatically used by goGPS when available. \"VMF local path\" - this points to the local folder where the Vienna Mapping Function files are automatically downloaded by goGPS. \"ATM local path\" points to the local folder where the Atmospheric Loading files are automatically downloaded by goGPS. Go back to the Index of contents Tab Commands This is the main tab where the sequence of commands that goGPS will perform during his execution are defined. The components that can be seen here are just 3: On the right there is an editor containing some command list Execution examples for various kinds of processing. The user cannot interact with this, it can only copy parts of the code present here. On the left there is another editor where the user can type to commands to be executed by goGPS. The commands must be written according to the goGPS command language At the bottom of the editor, there is a button that will open a window that displays a simple command language help with the list of all the commands available and their corresponding parameters. Go back to the Index of contents Tab Data Sources In this tab, the user defines the location of the observation files, the period of processing, and the size of the sessions. \"Project home directory\" - this field points to the . The project home is the folder containing all the folders of the project. It is very important to notice that all the relative paths that can be used in the configuration start from this folder, this allows having a portable project as long as into the .ini file all the other resources paths are written as relative paths and everything is moved together. The GUI automatically translates full paths to relative paths. Sessions In the sessions panel, it is possible to define the limits of epochs to process, time keywords (e.g. ${WWWW}, ${DOY}, ${YYYY}, ...) used for the definition of the paths will be substituted accordingly to the current session. goGPS manage the processing of a set of RINEX file in a relatively complicated but flexible way. The user defines the time span that goGPS will be able to consider by selecting Start and Stop dates, this will be the maximum size of the project, whether or not it will be entirely processed. The number of epochs processed will depend on other parameters: the for loop on sessions and the duration of the session itself. If a period of two weeks is selected (Start Stop limits) the user can run 14 sessions each with a dimension of 86400s (daily). (Note that: it is possible to process daily sessions even if the observations are stored into hourly RINEX files, and vice-versa) \"Start\" - marks the first epoch to processable. \"Stop\" - marks the last epoch to processable. \"Session duration\" - this is useful to limit the number of epochs to batch process, or to get solutions at higher rates. Pay attention that inserting here a too large number will cause the generation of a huge Normal matrix, the adjustment might use all the free RAM and takes forever to finish. The dimension of the final LS adjustment will depend on the number of observable used (constellations, trackings, ...) and the rate of the data. Frequent session durations are: 86400 seconds - will process 24 hours of data all together in a unique LS adjustment; 3600 seconds - will generate independent (if no buffer is selected) solutions every hour of data to have a series of hourly positions. \"Buffers\" - buffers are an almost unique feature of goGPS, they can be very useful to limit border effects. The epoch in the buffer will concur to the joint LS solution but they will not affect the dimension of the sessions. Only the parameters estimated in the session will be exported in the output receiver object (buffers are never considered). e.g. [14400, 14400] seconds - means 3 hours for each buffer, if the session is of 86400 seconds this will make goGPS process a total of 30 hours of data in a unique solution, each session will overlap the next one for a total of 6 hours \"Smooth troposphere at boundaries\" - this is a flag to be used only when buffers are set different from 0. When set, the tropospheric parameters estimated in the overlap with another session will be merged thus allowing a smoother solution at the change of session. \"Separate coordinates at boundaries\" - when set, the buffer will be used for the estimation of the tropospheric parameters and the phase ambiguities, but not for the positions. A separate set of coordinates will be estimated for each one of the two buffers, this improves the ambiguity estimation and limits the border effect but should not influence (just minimally) the estimated position for the defined session. \"RINEX based session\" - this flag forces the dimension of the session to be exactly the one of the RINEX observation files (this dimension should be homogeneous among all the files). \"Session character list\" - RINEX2 standard naming convention uses a single character to define the session, in these fields it is possible to define the characters to be used. Usually, these are just [\"0\", \"0\", \"0\"] for daily files and [\"abcdefghijklmnopqrstuvwx\", \"a\", \"x\"] for hourly files. Stations \"Observation directory\" - this is the root folder containing all the observation files, relative paths in the next field start from here. When selecting a folder containing observation files goGPS try to add all the station present in there to the processing. \"Observation files\" - contains the names and relative paths of the files of the stations (receivers) to be processed. Note that goGPS accept RINEX2 and RINEX3 observations files only. \"Recursive get marker names\" - using this button is possible to add stations in a recursive way starting from a directory. Go back to the Index of contents Tab Receiver Info This is a tab reserved for receiver specific parameters. In here in the future, it will be possible to set individual parameters for each station to override the generic ones (e.g. trackings to use, cut-off, etc...) but at the moment only coordinates can be provided. At the bottom of the tab, the user can set the path to the directory containing the multipath maps files and the location of the ocean loading file. \"CRD filename\" - points to the coordinate file of all the stations. This is the only field in this tab to have a corresponding matching in the .ini setting file, goGPS import the coordinate file before starting the computations, for this reason, any unsaved modification to the coordinates will be ignored during the processing. \"Coordinate table\" - this is a table containing information loaded from the coordinate files, to modify them the user can directly manipulate the file with a text editor or through this interface. At the moment the data stored into the coordinate file are: Earth Centered Earth Fixed (ECEF) XYZ coordinates a flag explaining how to consider these coordinates \"0\" use the coordinates as a rough a-priori position (>100 meters of error) \"1\" use the coordinates as a good a-priori position \"2\" consider the coordinates as fixed (they will not be estimated by goGPS) \"3\" consider the coordinates as fixed only by the pre-processing (they will not be estimated by goGPS in the pre-processing step unless detected to be not good enough), this allows a faster and more homogeneous pre-processing and outlier detection. Temporal validity limits of the coordinates Speed of the coordinates as a linear trend. The reference epoch for computing coordinates at a different time is the \"start\" epoch. \"Clear All\" - clear the coordinates table. \"Add a line\" - adds an empty line to the coordinates table. \"Remove selected\" - remove lines with selected cells from the coordinates table. \"Import from RINEX\" - will try to fill the table of coordinates reading the XYZ values from the header of the RINEX files that will be read by goGPS during its execution. \"Save\" - will save the current status of the coordinates as visualized in the table to the current coordinate file \"Save as\" - will save the current status of the coordinates as visualized in the table asking for the path of the file \"Save (Default)\" - will save the current status of the coordinates as visualized in the table to a file named stations.crd in the folder <prj_home>/station/CRD/ \"Inspect Trackings\" - generates a table displaying all the code observation types tracked (works best on RINEX 3 files, this tool is still experimental) \"ShowMap\" - will display a map of the stations at the coordinates present into the table overlaying Google satellite images. This tool can be useful for a fast overview of the stations. \"Multipath mitigation dir\" - this is the directory containing receiver specific multipath maps. \"Ocean loading filename\" - this is a resource that cannot be downloaded automatically and is strictly related to the stations. The resources tab requires little modifications while this field is typically checked every time a station is added, for this reason, it is positioned just after the definition of the observation files. Ocean loading are stored into a file with .blq extension and they have to be generated by Chalmers website using the tide model FES2004. To help the user requests this file with the missing tides the button \"Get missing BLQ\" can be pressed, it will open a window containing the code to copy and paste in the Chalmers website. When they send the ocean tide coefficients via e-mail the user should manually create or append them to the file pointed in this field. Go back to the Index of contents Tab Pre-Processing In this tab, the user can select the data to be processed, set some thresholds for the pre-processing and activate some input modifiers. \"Constellation Selection\" - this panel allows to activate and de-activate some satellite systems / frequencies. Note: the user needs to select the proper orbits for the enabled constellations (e.g. use MGEX orbits when various systems are selected); when processing with the combined engine only the best frequencies are used for creating an iono-free combination; be aware that due to the inter-frequency clock bias with L5 not automatically handled by goGPS, selecting GPS L5 may produce bad results; to use more than two frequency at a time the uncombined engine must be used for the processing; if a frequency/constellation is not present in a receiver goGPS should be able with the remaining observables. \"Min satellite per epoch\" - under this threshold the epoch is discarded from the processing (default value is 2). \"Data cut-off angle\" - during the preprocessing, after the estimation of a good position of the receiver, all the observations of a satellite below this elevation are deleted from the workspace and not considered in the rest of the processing. \"SNR absolute threshold\" - Signal to Noise Ratio provides a good insight on the quality of the observations registered by the receiver, in particular, it is severely affected by multipath. When this index goes below a certain value it indicates that the observations (especially the pseudo-ranges) might be degraded, setting a threshold allows goGPS to discard these bad data. For more information see the function remUnderSnrThr in Receiver_Work_Space.m . \"SNR scaled threshold\" - different trackings (e.g. GPS C1C, C1W or GLONASS C1P and C1C) and different frequencies have different SNR scaling. Setting a threshold on 28dB might be good for one tracking, but the same value for another could delete too many values. goGPS try to rescale all the SNR from different systems/frequencies/trackings to the one of C1C (or comparable) to be able to set up a unique SNR limit valid for all the observables instead of setting a different one for each observable. A value between 25-32 dB is generally good. To scale the SNR a rough estimation of the pseudo-ranges noise is performed reducing the data with their synthetic version, biases are removed and the standard deviation of the residuals is computed on a moving window arc by arc. Pseudo-ranges below the threshold are deleted from the receiver before the last estimation of the code-only solution in pre-processing. For more information see the function remUnderSnrThr in Receiver_Work_Space.m . In the following figure, the level of noise of a WTZZ (Wetzel) station for GLONASS C1 is compared, C1P has lower noise but also lower SNR, its SNR is scaled to have similar values for the same level of noise of C1C. \"Min arc length\" - goGPS will delete any arc smaller than this value, the number is expressed in epochs and not seconds. Remember that the ambiguity of a small arc is generally badly estimated, a reasonable value for this parameter in a 30 seconds processing is 10-12 epochs \"Max code positioning error\" - if the pre-processing of a station returns a sigma0 (from the LS adjustment) larger than this value, the station is considered having problems, pre-processing fails and PPP or network adjustment can not be computed. \"Max code observation error\" - all the pseudo-range observations having a residual from the last step of pre-processing larger than this value are deleted and a new LS adjustment is performed without them. \"Trackings combination\" - when this flag is selected carrier-phase observations from multiple trackings of the same frequency are combined using their approximate noise levels as weights, tracking biases and cycle-slips not present on all the trackings are estimated and corrected (experimental - default \"on\"). For more details see the function combinePhTrackings in Receiver_Work_Space.m . To estimate the noise level of each carrier-phase ( ph ) and then the weights the following algorithm is applied: using the position computed at the end of pre-processing (code positioning) compute the synthesized pseudo-ranges (_spr_) for the satellites seen by the receiver compute the residuals: _ph_ - _spr_ remove relative tracking biases compute the moving variance (5 epoch window) for each tracking of the same observable (e.g. L1C L1W) compute a cubic interpolation of the variance with respect to the elevation compute the weight as 1 / this interpolated index \"Clock re-alignment\" - the satellite clocks estimated by many providers have severe jumps at the end of the day. These are spanning from some centimeters to a few meters; selecting this flag goGPS will try to compensate and correct this jumps (experimental - default \"off\"). This effect is probably due to the independent estimation of the clock errors among different days. For more details see the function addClk in Core_Sky.m . Here follows an example of this jump, seen as a spike in the clock drift of a satellite (expressed in meters): The effect of this flag influences the solution near midnight GMT when two sets of old and new ephemeris connect. Removing this jump improves the smoothness of the orbits and thus the outlier detection phase that otherwise may find false-positive outliers. In the following example using different orbit providers and processing the ZIMM (Zimmerwald) station with the PPP uncombined goGPS engine we can see how the orbit of GFZ and CNES produce larger deviation in the estimated ZTD with respect to the other solutions: when the re-alignment flag is selected the solutions change showing the following behaviors: solutions computed with GFZ and CNES orbits improve, while some of the others are now worse. Use this flag carefully checking case-by-case if this adjustment improves the solution. The correction algorithm at the moment is very simple and works as follows: Take 200 epochs at the left of the file change epoch, and 200 at the right compute std of the drift of the two subsets of data if the jump is greater than the standard deviation compute a correction (correction) perform a linear interpolation of the two subsets predicting one epoch of the clock from the two sides and offset the right side to minimize the jump An offset in a satellite clock in a network solution causes no problems, while in PPP might influence the ambiguity estimation of an arc, this correction is still experimental and needs additional investigations to be applied safely. PPP corrections - This panel allows applying all the corrections needed for a Precise Point Positioning. All the corrections are applied at the end of the pre-processing phase, using fixed coordinates. Although all these corrections are not necessary for a network adjustment, applying them allows a better outlier detection. Among all the available corrections \"Atmospheric Loading\" and \"High Order Ionosphere\" are the ones with a lesser impact and can be disabled safely. The list of corrections that can be applied to the GNSS observations are: \"Receiver PCO/PCV\" - phase center offsets and variations, the magnitude of this effect depends on the antenna type \"Solid Earth Tide\" - tides due to Earth's crust movements (tens of centimeter). \"Pole Earth Tide\" - tides due to the wobbling of the Earth rotation axis (up to 2.5 cm vertical - 0.7 cm horizontal). \"Phase Wind Up\" - affect only phases due to the electromagnetic nature of circularly polarised waves, it depends on the relative orientation of satellite and receiver antennas (some centimeters). \"Shapiro Delay\" - relativistic effect (less than 2 cm). \"Ocean Loading\" - due to ocean tides deformations of the seafloor and a surface displacement of adjacent land (few centimeters). \"Atmospheric Loading\" - this effect is due to the variation of the atmospheric pressure. \"High Order Ionosphere\" - effect due to the second, and third-order due to the signal passing through the ionosphere. \"Use a-priori Iono Model\" - effect of ionosphere computed with the model selected in the Athmosphere tab , this is very useful in case of ionospheric interpolation. \"Multipath mitigation\" - with this pop-up menu the user can choose to try to mitigate multipath using previously generated multipath maps. It is possible to choose between a map based on a Zernike polynomials expansion (smoother) or the version with restored the higher frequencies of staking the residuals, see the command section Multipath management for further details. On the left the smoother solution, on the right the highest details of the staking are preserved Go back to the Index of contents Tab Processing In the processing tab, the user can manipulate the options (PPP and Network adjustment) of the processing engines and select the output to be kept in the output container object. Coordinate estimation \"Separate antenna center for each GNSS\" - when selected goGPS internally computes different phase antenna centers for each constellation \"Additional coordinates rates\" - this function at the moment is used mostly for debugging, it allows to compute up to 3 separate coordinates sets at a different rate. To view their computed values you need to access directly to the object GNSS_Station , at the end of execution they will be in rec(rec_number).work.add_coo (for the last computed work-space) and rec(rec_number).out.add_coo (for the complete series of outputs). Generic Options \"Observation weighting\" - Select the type of observation weighting function. These are the available options: uniform - all observations equally weighted satellite elevation $sin(el)$ square of satellite elevation $sinn(el)^2$ \"Max code observation err\" - the pseudo-range observations having residuals above this threshold are excluded from the LS adjustment (this threshold works only for the uncombined engine). \"Max code observation err\" - the carrier phase observations having residuals above this threshold are excluded from the LS adjustment. Tropospheric options Estimate ZTD - when this flag is selected the Zenit Total Delay is estimated during the step of processing, it may be useful to disable this option executing a network adjustment of very short baselines. Estimate ZTD gradients - this option enables the computation of north and east tropospheric gradients. Absolute tropo in-network - activating this flag when performing a network adjustment with long base-lines the full tropospheric delay is estimated for each station. Ionosphere Options Ionosphere Management - here it is possible to select the kind of management for the ionospheric delay, this option is valid only when using the combined engine 1 - Iono-free - when selected goGPS uses the iono-free combination to process dual-frequency data. 2 - Smooth GF - when selected goGPS will use the geometry-free combination pf L1 and L2 (only these two) to compute a smooth ionospheric delay that will be removed from the observations. This is similar to using an iono-free approach but with a slightly smoother final result. 3 - External-model - when this option is selected (or only one frequency is logged by the receiver) no combinations are used, an a-priori external model should be applied (see tab pre-processing) to have reasonable results. The model to be used is set in the Atmosphere tab . PPP only Options These options are dedicated to the Precise Point Positioning adjustment. \"PPP Snooping / Reweight\" - This pop-up menu allow the user to chose different types of outlier rejection / data re-wight. The list of methods currently available is: 1 - none perform neither snooping nor reweight 2 - re-weight Huber see Table2 in G\u00f6kalp et al, 2008 - Evaluation of Different Outlier Detection Methods for GPS Networks is applied on all the observations having residuals greater than a threshold level, set to be 2 * std(residuals) 3 - re-weight Huber (no threshold) Huber M-estimator applied on all the residuals 4 - re-weight Danish see Table2 in G\u00f6kalp et al, 2008 - Evaluation of Different Outlier Detection Methods for GPS Networks is applied on all the observations having residuals greater than a threshold level, set to be 2 * std(residuals) 5 - re-weight DanishWM Modified Danish M-estimator, is applied on all the observations having residuals greater than a threshold level, set to be 2 * std(residuals) 6 - re-weight Tukey see Table2 in G\u00f6kalp et al, 2008 - Evaluation of Different Outlier Detection Methods for GPS Networks is applied on all the observations having residuals greater than a threshold level, set to be 2 * std(residuals) 7 - simple snooping all the observations having residuals greater than 2.5 * std(residuals) are removed from the adjustment 8 - smart snooping it's a method based on two threshold levels, the first one triggers the removal of the observations until its residuals re-enter below the second threshold (e.g. detection on 6 sigma0, removal of data till their residuals are below 2.5 sigma0). 9 - smart snooping + arc trim like the previous but the second threshold is lower (2 * std(residuals)), furthermore, all the arc edges having residuals greater than 2 * std(residuals) are removed \"PPP Try to fix Ambiguity (Experimental)\" - when this flag is enabled the PPP engine will try to fix ambiguities, note that this option at the moment works only with CNES orbits (they provide BIASes), receivers with precise code, and the combined engine. \"Enable PPP for receivers containing only a single frequency\" - by default goGPS does not compute any PPP solutions for single frequency receivers due to the high ionospheric errors that might be introduced. In some cases, the ionospheric delay is removed from the observations by interpolation or models and the user might want to re-enable the PPP processing. Network only Options These options are dedicated to NETWORK adjustment. \"NET Snooping / Reweight\" - Network snooping and reweight have not been fully implemented. A different strategy is applied here: the uncombined engine just disregard all the observations set above the limit for maximum phase and code residuals in the generic options (see Network.adjustNew for more details); the combined approach instead have three options: 1 - none perform neither snooping nor reweight 2 - simple 4 loops - this procedure removes outliers iteratively on residuals. At first, try to remove the worse data till the solution (in maximum 4 iterations) converges to a final adjustment (see Network.adjust for more details) 3 - 4 loops + remove bad satellites In addition to the previous approach, goGPS remove \"bad\" satellites, i.e. all the observations having residuals not having zero mean (see Network.adjust for more details) \"NET fixing approach\" - select the fixing approach to be used (remember that to use lambda3 you need to have requested the code for applying it), the current options are: 1 - none 2 - lambda3 search and shrink 3 - lambda3 integer bootstrapping 4 - lambda partial 5 - bayesian 6 - bayesian best integer equivariant 7 - sequential best integer equivariant Results to store goGPS is object-oriented, every receiver is considered a unique GNSS_Station, internally the software stores data in two objects: work , and out . Work is an object of class Receiver_Work_Space and contains the observations and everything is needed for the computation of the results of a single session, out is an object of class Receiver_Output and collects the output of a receiver for all the sessions. The results stored in the work object are pushed to out only when the PUSHOUT command is issued. The following flags select the output to be kept. Note: the data stored in out can take a lot of RAM space, this is the reason for the possibility of selecting what must be kept. \"Dt (clock errors)\" - Clock Errors \"PWV\" - Precipitable Water Vapour \"ZWD\" - Zenith Wet Delay \"ZTD\" - Zenith Total Delay \"Tropo Gradients\" - Tropospheric gradients (North, East) \"A-priori tropo\" - A-priori tropospheric delay as computed from the model \"P / T / H\" - Pressure / Temperature / Humidity \"Outliers / CS\" - Outliers and Cycle slips (per satellite to keep them small) \"Quality (SNR)\" - This is an index that might be improved in the future (per satellite to keep them small), at the moment it is storing just SNR \"Number of Sat. per Epoch\" - Number of satellites used per epoch (and by constellation) \"Azimuth / Elevation\" - Azimuth and Elevation of all the satellites in view \"Combined Residuals\" - Residuals of the processing (one per satellite) \"Uncombined Code Res.\" - Residuals of the processing for pseudo-range observations (one per observables) \"Uncombined Phase Res.\" - Residuals of the processing for carrier-phase observations (one per observables) \"Mapping functions\" - Mapping function of the troposphere (one per satellite) Output folder In this tab the folder of final storage of the results can be changed. Note that some results will be saved into sub-folders automatically created. Go back to the Index of contents Tab Parametrization PPP In this tab, the user can set the parametrization for the PPP processing. Note: The term regularization is use for Tykhonov regularization also know as ridge regression also know as L2 regularization, it is implemented by pseudo-observation. Coordinates The parametrization of the coordinates can be set in this panel Estimate - This tick box will determine if the coordinates are estimated or not in the adjustment. Time parametrization - This pop up let the user choose the type of time parametrization wanted, the available options are: 1 - Costant - One set of coordinates for the whole session. 2 - Epoch wise - One set of coordinates per epoch. 4 - Regular spaced constant - Sets of coordinates spaced regulary 5 - Linear spline - Linear spline 6 - Cubic spline - Cubic spline Rate - Temporal rate of the parameter.Ignored if Time parametrization set to constant Frequency parametrization - This pop up will let you choose the possible parametrization in term of frequency and tracking (Only in uncombined mode) 1 - Per tracking - One set of coordinates for each different tracking. 2 - Per frequency - One set of coordinates for each different frequency. 3 - One for all - One set of coordinates for all tracking. 4 - Per binned frequency - One set of coordinates for each different frequency (Glonass frequency binned per band). 5 - Per frequency and constellation - One set of coordinates for each frequency divided also by constellation. 6 - Per rinex band - One set of coordinates for each RINEX 3 band. Ionosphere - This panel deals with the parametrization of the ionosphere Estimate - This tick box will determine if the ionospheric parameter is estimated or not in the adjustment. Troposphere-ZTD In this panel on the left column, the ZTD parametrization can be set Estimate - This tick box will determine if the ZTD parameter is estimated or not in the adjustment. Time parametrization - This pop up can be used to choose the time parametrization: 1 - Epoch wise - One ztd paramter per epoch. 2 - Linear spline - Ztd parametrized as a linear spline. 3 - Cubic spline - Ztd parametrized as a cubic spline. Rate - Rate of ZTD spline Absolute Regularization - Absolute regularization of each ZTD paramter by means of pseudo-observation with standard deviation equal to the value of the field Differential Regularization - Regularize the difference of the paramter t+1 and t with an obervation with standard deviation equal to the value of the field (unit in m/sqrt(hour)) Troposphere-ZTD Gradients In this panel on the left column, the ZTD parametrization can be set Estimate - This tick box will determine if the ZTD gradients parameter (North and East) are estimated or not in the adjustment. Time parametrization - This pop up can be used to choose the time parametrization: 1 - Epoch wise - One set of Ztd gradients paramter per epoch. 2 - Linear spline - Ztd gradients parametrized as a linear spline. 3 - Cubic spline - Ztd gradients parametrized as a cubic spline. Rate - Rate of Ztd gradient spline Absolute Regularization - Absolute regularization of each ZTD gradient paramter by means of pseudo-observation with standard deviation equal to the value of the field Differential Regularization - Regularize the difference of the paramter t+1 and t with an obervation with standard deviation equal to the value of the field (unit in m/sqrt(hour)) Bias In this panel it is possible to parametrize the various receiver bias Separate pr ph clock - This tick box will separate clock by phase and pseudo-ange in the adjustment The possible parameters are organized in a tab, they are: Clock - Clock desynchronization Inter Frequency Bias - Bias between different frequency tracked by the receiver Inter Tracking Bias - Bias between different code tracked by the receiver The table let the user choose the parametrization with five column: Estimate - This tick box will determine if the parameter is estimated or not in the adjustment. Time parametrization - This pop up can be used to choose the time parametrization: 1 - Constant - One paramter per the whole session. 2 - Epcoh wise - One paramter per epoch 4 - Regular spaced constant - Sets of coordinates spaced regulary 5 - Linear spline - Linear spline 6 - Cubic spline - Cubic spline Rate - Rate of paramater Absolute Regularization - Absolute regularization of each ztd paramter by means of pseudo-observation with standard deviation equal to the value of the field Differential Regularization - Regularize the difference of the paramter t+1 and t with an obervation with standard deviation equal to the value of the field (unit in m/sqrt(hour)) Tab Parametrization Network In this tab, the user can set the parametrization for the network processing. Note: The term regularization is used for Tykhonov regularization also know as ridge regression also know as L2 regularization, it is implemented by pseudo-observation. Coordinates The parametrization of the coordinates can be set in this panel Estimate - This tick box will determine if the coordinates are estimated or not in the adjustment. Time parametrization - This pop up let the user choose the type of time parametrization wanted, the available options are: 1 - Costant - One set of coordinates for the whole session. 2 - Epoch wise - One set of coordinates per epoch. 4 - Regular spaced constant - Sets of coordinates spaced regulary 5 - Linear spline - Linear spline 6 - Cubic spline - Cubic spline Rate - Temporal rate of the parameter. Ignored if Time parametrization set to constant Frequency parametrization - This pop up will let you choose the possible parametrization in term of frequency and tracking (Only in uncombined mode) 1 - Per tracking - One set of coordinates for each different tracking. 2 - Per frequency - One set of coordinates for each different frequency. 3 - One for all - One set of coordinates for all tracking. 4 - Per binned frequency - One set of coordinates for each different frequency (Glonass frequency binned per band). 5 - Per frequency and constellation - One set of coordinates for each frequency divided also by constellation. 6 - Per rinex band - One set of coordinates for each RINEX 3 band. Ionosphere - This panel deals with the parametrization of the ionosphere Estimate - This tick box will determine if the ionospheric parameter is estimated or not in the adjustment. Troposphere This panel let the user decide how to parametrize the tropospheric parameter. The two parameters are organized in a tab, they are: ZTD - Estimate a correction to the zenith tropospheric delay ZTD Gradient - Estimate north and east ZTD gradients The table let the user choose the parametrization with five column: Estimate - This tick box will determine if the parameter is estimated or not in the adjustment. Time parametrization - This pop up can be used to choose the time parametrization: 1 - Constant - One paramter per the whole session. 2 - Epcoh wise - One paramter per epoch 4 - Regular spaced constant - Sets of coordinates spaced regulary 5 - Linear spline - Linear spline 6 - Cubic spline - Cubic spline Rate - Rate of paramater Absolute Regularization - Absolute regularization of each ztd paramter by means of pseudo-observation with standard deviation equal to the value of the field Differential Regularization - Regularize the difference of the paramter t+1 and t with an obervation with standard deviation equal to the value of the field (unit in m/sqrt(hour)) Bias Receiver In this panel it is possible to parametrize the various receiver bias Separate pr ph clock - This tick box will separate clock by phase and pseudo-range in the adjustment The possible parameters are organized in a tab, they are: Clock - Clock desynchronization Inter Frequency Bias - Bias between different frequency tracked by the receiver Inter Tracking Bias - Bias between different code tracked by the receiver The table let the user choose the parametrization with 5 column: Estimate - This tick box will determine if the parameter is estimated or not in the adjustment. Time parametrization - This pop up can be used to choose the time parametrization: 1 - Constant - One paramter per the whole session. 2 - Epcoh wise - One paramter per epoch 4 - Regular spaced constant - Sets of coordinates spaced regulary 5 - Linear spline - Linear spline 6 - Cubic spline - Cubic spline Rate - Rate of paramater Absolute Regularization - Absolute regularization of each ztd paramter by means of pseudo-observation with standard deviation equal to the value of the field Differential Regularization - Regularize the difference of the paramter t+1 and t with an obervation with standard deviation equal to the value of the field (unit in m/sqrt(hour)) Bias Satellite In this panel, it is possible to parametrize the various satellite bias Separate pr ph clock - This tick box will separate clock by phase and pseudo-range in the adjustment The possible paramters are organizized in a tab, they are: Clock - Clock desyncronization Inter Frequency Bias - Bias between different frequency tracked by the receiver Inter Tracking Bias - Bias between different code tracked by the receiver The table let the user choose the parametrization with 5 column: Estimate - This tick box will determine if the parameter is estimated or not in the adjustment. Time parametrization - This pop up can be used to choose the time parametrization: 1 - Constant - One paramter per the whole session. 2 - Epcoh wise - One paramter per epoch 4 - Regular spaced constant - Sets of coordinates spaced regulary 5 - Linear spline - Linear spline 6 - Cubic spline - Cubic spline Rate - Rate of paramater Absolute Regularization - Absolute regularization of each ztd paramter by means of pseudo-observation with standard deviation equal to the value of the field Differential Regularization - Regularize the difference of the paramter t+1 and t with an obervation with standard deviation equal to the value of the field (unit in m/sqrt(hour)) Go back to the Index of contents Tab Atmosphere This tab is used to select the options for better management of the atmospheric effects. Ionosphere options Ionosphere a-priori Model - in this pop-up menu the user can select the type of a-priori model to be removed from the observations. A good model helps the outlier-detection and pre-processing phase. The available options are: 1 - none 2 - Klobuchar - standard Klobuchar model, it requires ionospheric parameters that are usually read from broadcast orbits (goGPS can automatically fetch them) 3 - IONEX - this is the most precise model that can be applied, it is read from IONEX files, depending on the preferred type selected in the resources tab it can be a model from observed values or just a prediction. Tropospheric options Mapping function - in this pop-up menu it is possible to select the tropospheric mapping function, at the moment only 3 models are available, the additional model can be implemented into Receiver_Work_Space.getSlantMF . 1 GMF - Global Mapping Function 2 VMF gridded - Vienna Mapping Function (they are automatically downloaded when needed) 3 Neil - Niel Mapping Function Mapping function gradients - in addition to the tropospheric mapping function for estimating zenith delays, it is possible to specify the mapping function for the gradients. 1 Chen and Herring 2 MacMillan A-priori zenith delay - this is the a-priori model to be used for computing tropospheric delays, two options are available: 1 Saastamoinen from meteo data - this option makes goGPS use as a-priori model Saastamoinen, the origin of the data to be used depends on the next field in the GUI 2 VMF gridded zenith delays - these are Zenith delays coming from the Vienna gridded maps of ZTD Meteo Data - here the user can select the source of the meteorological data to be used: 1 Standard Atmosphere - Standard values of Pressure (1013.25 mbar), Temperature (18 \u00b0Celsius), Humidity (50 %) 2 GPT - 3 MET files - use the Meteorological RINEX specified in the following fields. MET files - goGPS can use meteorological RINEX files to import temperature, pressure, and humidity from meteorological stations. It automatically interpolates the data at the right elevation and at the station positions (See Meteo_Data.getVMS for more details). The syntax for these files are like Go back to the Index of contents Bottom Bar In the bottom bar, the user can find buttons to load and save the current settings and the full path of the current .ini file in use. And the button \" go! \" to start execution. Go back to the Index of contents","title":"Settings"},{"location":"Settings/#gogps-settings","text":"The settings for running a project in goGPS are completely stored in a unique text file (.ini). This is fully mapped to an object instance of a class Main_Settings and always automatically exported with all the comments necessary to understand the meaning of the parameters. The .ini file can be edited using a normal text editor and passed to goGPS to run automatically. You can also modify 99% of the settings using the goGPS Edit GUI that will be automatically loaded on goGPS start, the remaining 1% of the settings can be found together with the plain text ini file in the Advanced TAB of the interface. In the following sections, it is possible to find a description of all the elements present in the current goGPS Edit Settings Interface and the corresponding parameter present in the setting file.","title":"goGPS Settings"},{"location":"Settings/#index-of-contents","text":"The goGPS Edit interface is structured with a Menu, a Main SideBar, a list of Tabs and a bar in the bottom: Menu Sidebar Tabs Tab Advanced Tab Resources Tab Commands Tab Data Sources Tab Receiver Info Tab Pre-Processing Tab Processing Tab Parametrization PPP Tab Parametrization Network Tab Atmosphere Bottom bar Note: In the main window flags on the left of file or directory paths indicate if the file/directory exists or if it is missing","title":"Index of contents"},{"location":"Settings/#menu","text":"The goGPS menu allows performing simple operations and opening tools or other windows. It is still under development and will be expanded in the future. At the moment it allows to do the following operations: goGPS About open the about window Options contains a set of combo modifier of all the settings to perform basic processing Set for PPP troposphere estimation Set for NET solution (short baselines - ignore ionosphere - ignore troposphere) Set for NET solution (medium baselines < 20km - ignore ionosphere) Set for NET solution (long baselines - iono-free) Project New open a window to create a new project. The automatic procedure will guide the user to generate a project folder with its main structure and a new generic settings file. Load load a .ini config file Save save the current configuration on the current .ini file, the current file is displayed in the bar at the bottom of the interface. Save As save the current configuration at the given location Go back to the Index of contents","title":"Menu"},{"location":"Settings/#sidebar","text":"On the left side of goGPS Edit Interface, there is a side-bar containing basic information about the data that will be available for processing. A section dedicated to the processing sessions is located at the top, it contains: a Check button to update the Session limits in the case they are not automatically updated First and Last epoch to be processed Duration (length) of each single session Buffer dimension in seconds of the data intervals to be used in addition to one of the sessions. (e.g. with a session of 86400 seconds - one day - and buffers of 10800 seconds - 3 hours - a total of 30 hours of data will be processed for each session, each session will overlap with the next, thus allowing a smoother estimation of tropospheric parameters and a better arc ambiguity estimation) A section dedicated to the receiver list is at the bottom of the sidebar. There you can find 3 buttons: Check to refresh the list of receivers when is not automatically updated Plot to generate a plot showing the period covered by each RINEX file that will be used for the project Trackings to generate a table displaying all the code observation types tracked (works best on RINEX 3 files, this tool is still experimental) Below there is a list of all the stations of the project. For each station, two columns are reporting how many requested files are present or missing (e.g. in the processing of 1 month of daily files some of the RINEX could be missing) Go back to the Index of contents","title":"Sidebar"},{"location":"Settings/#tabs","text":"At the right of the sidebar, some tabs are containing the various global settings that can be defined","title":"Tabs"},{"location":"Settings/#tab-advanced","text":"This tab is used to change all the settings including the hidden ones. In the editor a copy of the current ini config file is present and it can be modified directly. Two buttons are used to refresh the UI when the ini file is changed. Communication dir is the directory used by goGPS parallelism to communicate with the slave processors. This must be seen by all the Slave processes and the Master (a.k.a. the MATLAB process running the full goGPS) Go back to the Index of contents","title":"Tab Advanced"},{"location":"Settings/#tab-resources","text":"The Resource tab contains all the settings defining the kind of orbits that need to be used, and the location of all the downloadable resources. Note: the Antenna file, the Geoid, and the Geomagnetic reference field are provided together with the code of goGPS, and updated constantly on the GitHub repository, while all the other resources are automatically downloaded and saved into the specified folders by goGPS (if the download flag is checked). In this tab many commands and fields are present, the first information that can be seen here is the location of the remote_resources.ini file that can be found at the top of the tab. This resource file contains all the information needed to find and download a goGPS resource (e.g. orbits, clock errors, Vienna Mapping Functions), together with their names. Generally, this file must never be changed, a more detailed guide on about file will be added to this wiki. To use orbits or other resources from a center not available in the list of goGPS centers the remote_resource.ini file must be modified manually (if you have a center to suggest and want it to be added to the remote_resource file open a ticket in GitHub and we will add it as soon as we can). List of commands/fields: \"Allow automatic download [...]\" - this command is a flag, if enabled it allows goGPS to search for the resources it needs online (always recommended) Center pop-up list - this control allow the select the kind of resources/provider to be used, the main centers are already available in goGPS: IGS, EMR, ESOC, JAXA, CODE, ... at the left of the command, the list of supported constellations is reported for the active choice. E.g. selecting JAXA the supported constellations are \"GRJ\", each letter represents a constellation: G GPS (US) R GLONASS (Russia) E Galileo (EU) J QZSS (Japan) C Beidou (China) I IRNSS (India) \"Center orbit type preference\" - contains a set of flags to specify the kind of orbit to be used. If more choices are selected the leftmost resource is the primary choice, when a type of resource (e.g. final orbits) is not present (even on a remote server) the next best solution is the one that will be used (e.g. rapid orbits) \"Center iono type preference\" - similarly to the orbits different types of ionospheric models are available with descending quality from left to right \"Resource tree inspector\" - this field cannot be modified, it just shows the remote location of all the resources that are required. All the information it displays are built on run-time from the remote_resource.ini file \"Reset all resources path\" - this button comes in handy when importing a project from another computer, in the settings file the location of the resources may be expressed as a full path and it might be no longer existing in the importing computer. Pressing this button all the resources paths will be reset to their default values. The green/red flags shown in this tab are useful to understand if a file/folder is missing. Below the button follows the list of all the local paths of the resources. Special time keywords can be used in the paths, they will automatically take all the values they can assume in the sessions span: ${WWWW} 4 char GPS week ${WWWWD} 4+1 char GPS week + day of the week ${D} 1 char day of the week ${3H} 2 char GPS hour (00, 03, 06, 09, 12, 15, 18, 21) ${6H} 2 char GPS hour (00, 06, 12, 18) ${HH} 2 char GPS hour ${QQ} 2 char GPS quarter of hour (00, 15, 30, 45) ${5M} 2 char GPS five minutes (05, 10, ... , 55) ${YYDOY} 2+3 char GPS year + day of year ${YYYY} 4 char GPS year ${YY} 2 char GPS year ${MM} 2 char GPS month ${DD} 2 char GPS day ${DOY} 3 char GPS day of the year ${S} 1 char session \"Antenna (ATX) filename\" - here the user has to set the path that points to the antenna file (usually the last IGS file available). This file contains information about Phase Center Offsets (PCOs) and Phase Center Variations (PCVs) of the antennas of the satellites and the receivers. It is a mandatory file, without it, the error in computing a solution can be extremely high. When the antenna for a certain receiver is not found with the proper radome the \"NONE\" radome is used instead. If no information about a frequency is found the data corresponding to the closest frequency will be used. If no information about a constellation is found the data corresponding to GPS with the closest frequency will be used. Note: additional antenna files (in ANTEX format) with custom values can be passed to goGPS, to load them they must be saved into a folder contained in the home of the project you are running, this folder is <prj_home>/station/ATX/custom/ , the file can have any name but its extension must be .ATX . \"Geoid local path\" - in this line the user has to set the location of the geoid grid file (in MATLAB .mat format) used to compute orthometric heights, note that passing a grid of a quasigeoid in here will lead to use normal heights (look at Vanicek et al 2012 for more info). For 99.9% of the processing, the included goGPS grid of EGM2008 is more than enough; when a point does not fall on the exact knot of the grid a bilinear (or cubic) interpolation is performed. \"CRX path\" - this is the path to the folder containing CRX files (satellite problem file), these are automatically downloaded from the CODE FTP server, they contain useful information on the status of the satellites (maneuvers, outage, and other unusual behaviors). \"Eph local dir\" - orbits ephemerides are loaded from their standard exchange format SP3, this is the location of storage of them, the name of the orbit is automatically generated depending on the selected \"center orbit type\". The orbits are automatically downloaded in the right location by goGPS but it is possible to put them manually in their local location. \"Clk local dir\" - similar to the ephemeris path this is the path of the corresponding clock file of the orbits. Some orbits have different clock files (e.g. @30 seconds, @5 seconds) they are chosen with the priority sequence listed into the remote_resource file. Generally, also this path must not be changed, goGPS will try to download the resources it needs by itself. \"ERP local dir\" - this is the folder containing the Earth Rotation Parameter files to be used together with their corresponding orbits. \"IONO local path\" - this points to the local folder where ionospheric models will be downloaded by goGPS. They can be used to reduce the ionospheric delay to allow a better single-frequency positioning or to just help convergence and improve interpolation techniques. \"IGRF local path\" - this is the folder pointing to the International Geomagnetic Reference Field Schmidt semi-normalized spherical harmonic coefficients, usually the user does not need to change this files or folder cause they are provided together with the goGPS code. \"DCB local path\" - this points to the local folder where the Differential Code Biases will be downloaded by goGPS. Differential Code Biases are automatically used by goGPS when available. \"VMF local path\" - this points to the local folder where the Vienna Mapping Function files are automatically downloaded by goGPS. \"ATM local path\" points to the local folder where the Atmospheric Loading files are automatically downloaded by goGPS. Go back to the Index of contents","title":"Tab Resources"},{"location":"Settings/#tab-commands","text":"This is the main tab where the sequence of commands that goGPS will perform during his execution are defined. The components that can be seen here are just 3: On the right there is an editor containing some command list Execution examples for various kinds of processing. The user cannot interact with this, it can only copy parts of the code present here. On the left there is another editor where the user can type to commands to be executed by goGPS. The commands must be written according to the goGPS command language At the bottom of the editor, there is a button that will open a window that displays a simple command language help with the list of all the commands available and their corresponding parameters. Go back to the Index of contents","title":"Tab Commands"},{"location":"Settings/#tab-data-sources","text":"In this tab, the user defines the location of the observation files, the period of processing, and the size of the sessions. \"Project home directory\" - this field points to the . The project home is the folder containing all the folders of the project. It is very important to notice that all the relative paths that can be used in the configuration start from this folder, this allows having a portable project as long as into the .ini file all the other resources paths are written as relative paths and everything is moved together. The GUI automatically translates full paths to relative paths. Sessions In the sessions panel, it is possible to define the limits of epochs to process, time keywords (e.g. ${WWWW}, ${DOY}, ${YYYY}, ...) used for the definition of the paths will be substituted accordingly to the current session. goGPS manage the processing of a set of RINEX file in a relatively complicated but flexible way. The user defines the time span that goGPS will be able to consider by selecting Start and Stop dates, this will be the maximum size of the project, whether or not it will be entirely processed. The number of epochs processed will depend on other parameters: the for loop on sessions and the duration of the session itself. If a period of two weeks is selected (Start Stop limits) the user can run 14 sessions each with a dimension of 86400s (daily). (Note that: it is possible to process daily sessions even if the observations are stored into hourly RINEX files, and vice-versa) \"Start\" - marks the first epoch to processable. \"Stop\" - marks the last epoch to processable. \"Session duration\" - this is useful to limit the number of epochs to batch process, or to get solutions at higher rates. Pay attention that inserting here a too large number will cause the generation of a huge Normal matrix, the adjustment might use all the free RAM and takes forever to finish. The dimension of the final LS adjustment will depend on the number of observable used (constellations, trackings, ...) and the rate of the data. Frequent session durations are: 86400 seconds - will process 24 hours of data all together in a unique LS adjustment; 3600 seconds - will generate independent (if no buffer is selected) solutions every hour of data to have a series of hourly positions. \"Buffers\" - buffers are an almost unique feature of goGPS, they can be very useful to limit border effects. The epoch in the buffer will concur to the joint LS solution but they will not affect the dimension of the sessions. Only the parameters estimated in the session will be exported in the output receiver object (buffers are never considered). e.g. [14400, 14400] seconds - means 3 hours for each buffer, if the session is of 86400 seconds this will make goGPS process a total of 30 hours of data in a unique solution, each session will overlap the next one for a total of 6 hours \"Smooth troposphere at boundaries\" - this is a flag to be used only when buffers are set different from 0. When set, the tropospheric parameters estimated in the overlap with another session will be merged thus allowing a smoother solution at the change of session. \"Separate coordinates at boundaries\" - when set, the buffer will be used for the estimation of the tropospheric parameters and the phase ambiguities, but not for the positions. A separate set of coordinates will be estimated for each one of the two buffers, this improves the ambiguity estimation and limits the border effect but should not influence (just minimally) the estimated position for the defined session. \"RINEX based session\" - this flag forces the dimension of the session to be exactly the one of the RINEX observation files (this dimension should be homogeneous among all the files). \"Session character list\" - RINEX2 standard naming convention uses a single character to define the session, in these fields it is possible to define the characters to be used. Usually, these are just [\"0\", \"0\", \"0\"] for daily files and [\"abcdefghijklmnopqrstuvwx\", \"a\", \"x\"] for hourly files. Stations \"Observation directory\" - this is the root folder containing all the observation files, relative paths in the next field start from here. When selecting a folder containing observation files goGPS try to add all the station present in there to the processing. \"Observation files\" - contains the names and relative paths of the files of the stations (receivers) to be processed. Note that goGPS accept RINEX2 and RINEX3 observations files only. \"Recursive get marker names\" - using this button is possible to add stations in a recursive way starting from a directory. Go back to the Index of contents","title":"Tab Data Sources"},{"location":"Settings/#tab-receiver-info","text":"This is a tab reserved for receiver specific parameters. In here in the future, it will be possible to set individual parameters for each station to override the generic ones (e.g. trackings to use, cut-off, etc...) but at the moment only coordinates can be provided. At the bottom of the tab, the user can set the path to the directory containing the multipath maps files and the location of the ocean loading file. \"CRD filename\" - points to the coordinate file of all the stations. This is the only field in this tab to have a corresponding matching in the .ini setting file, goGPS import the coordinate file before starting the computations, for this reason, any unsaved modification to the coordinates will be ignored during the processing. \"Coordinate table\" - this is a table containing information loaded from the coordinate files, to modify them the user can directly manipulate the file with a text editor or through this interface. At the moment the data stored into the coordinate file are: Earth Centered Earth Fixed (ECEF) XYZ coordinates a flag explaining how to consider these coordinates \"0\" use the coordinates as a rough a-priori position (>100 meters of error) \"1\" use the coordinates as a good a-priori position \"2\" consider the coordinates as fixed (they will not be estimated by goGPS) \"3\" consider the coordinates as fixed only by the pre-processing (they will not be estimated by goGPS in the pre-processing step unless detected to be not good enough), this allows a faster and more homogeneous pre-processing and outlier detection. Temporal validity limits of the coordinates Speed of the coordinates as a linear trend. The reference epoch for computing coordinates at a different time is the \"start\" epoch. \"Clear All\" - clear the coordinates table. \"Add a line\" - adds an empty line to the coordinates table. \"Remove selected\" - remove lines with selected cells from the coordinates table. \"Import from RINEX\" - will try to fill the table of coordinates reading the XYZ values from the header of the RINEX files that will be read by goGPS during its execution. \"Save\" - will save the current status of the coordinates as visualized in the table to the current coordinate file \"Save as\" - will save the current status of the coordinates as visualized in the table asking for the path of the file \"Save (Default)\" - will save the current status of the coordinates as visualized in the table to a file named stations.crd in the folder <prj_home>/station/CRD/ \"Inspect Trackings\" - generates a table displaying all the code observation types tracked (works best on RINEX 3 files, this tool is still experimental) \"ShowMap\" - will display a map of the stations at the coordinates present into the table overlaying Google satellite images. This tool can be useful for a fast overview of the stations. \"Multipath mitigation dir\" - this is the directory containing receiver specific multipath maps. \"Ocean loading filename\" - this is a resource that cannot be downloaded automatically and is strictly related to the stations. The resources tab requires little modifications while this field is typically checked every time a station is added, for this reason, it is positioned just after the definition of the observation files. Ocean loading are stored into a file with .blq extension and they have to be generated by Chalmers website using the tide model FES2004. To help the user requests this file with the missing tides the button \"Get missing BLQ\" can be pressed, it will open a window containing the code to copy and paste in the Chalmers website. When they send the ocean tide coefficients via e-mail the user should manually create or append them to the file pointed in this field. Go back to the Index of contents","title":"Tab Receiver Info"},{"location":"Settings/#tab-pre-processing","text":"In this tab, the user can select the data to be processed, set some thresholds for the pre-processing and activate some input modifiers. \"Constellation Selection\" - this panel allows to activate and de-activate some satellite systems / frequencies. Note: the user needs to select the proper orbits for the enabled constellations (e.g. use MGEX orbits when various systems are selected); when processing with the combined engine only the best frequencies are used for creating an iono-free combination; be aware that due to the inter-frequency clock bias with L5 not automatically handled by goGPS, selecting GPS L5 may produce bad results; to use more than two frequency at a time the uncombined engine must be used for the processing; if a frequency/constellation is not present in a receiver goGPS should be able with the remaining observables. \"Min satellite per epoch\" - under this threshold the epoch is discarded from the processing (default value is 2). \"Data cut-off angle\" - during the preprocessing, after the estimation of a good position of the receiver, all the observations of a satellite below this elevation are deleted from the workspace and not considered in the rest of the processing. \"SNR absolute threshold\" - Signal to Noise Ratio provides a good insight on the quality of the observations registered by the receiver, in particular, it is severely affected by multipath. When this index goes below a certain value it indicates that the observations (especially the pseudo-ranges) might be degraded, setting a threshold allows goGPS to discard these bad data. For more information see the function remUnderSnrThr in Receiver_Work_Space.m . \"SNR scaled threshold\" - different trackings (e.g. GPS C1C, C1W or GLONASS C1P and C1C) and different frequencies have different SNR scaling. Setting a threshold on 28dB might be good for one tracking, but the same value for another could delete too many values. goGPS try to rescale all the SNR from different systems/frequencies/trackings to the one of C1C (or comparable) to be able to set up a unique SNR limit valid for all the observables instead of setting a different one for each observable. A value between 25-32 dB is generally good. To scale the SNR a rough estimation of the pseudo-ranges noise is performed reducing the data with their synthetic version, biases are removed and the standard deviation of the residuals is computed on a moving window arc by arc. Pseudo-ranges below the threshold are deleted from the receiver before the last estimation of the code-only solution in pre-processing. For more information see the function remUnderSnrThr in Receiver_Work_Space.m . In the following figure, the level of noise of a WTZZ (Wetzel) station for GLONASS C1 is compared, C1P has lower noise but also lower SNR, its SNR is scaled to have similar values for the same level of noise of C1C. \"Min arc length\" - goGPS will delete any arc smaller than this value, the number is expressed in epochs and not seconds. Remember that the ambiguity of a small arc is generally badly estimated, a reasonable value for this parameter in a 30 seconds processing is 10-12 epochs \"Max code positioning error\" - if the pre-processing of a station returns a sigma0 (from the LS adjustment) larger than this value, the station is considered having problems, pre-processing fails and PPP or network adjustment can not be computed. \"Max code observation error\" - all the pseudo-range observations having a residual from the last step of pre-processing larger than this value are deleted and a new LS adjustment is performed without them. \"Trackings combination\" - when this flag is selected carrier-phase observations from multiple trackings of the same frequency are combined using their approximate noise levels as weights, tracking biases and cycle-slips not present on all the trackings are estimated and corrected (experimental - default \"on\"). For more details see the function combinePhTrackings in Receiver_Work_Space.m . To estimate the noise level of each carrier-phase ( ph ) and then the weights the following algorithm is applied: using the position computed at the end of pre-processing (code positioning) compute the synthesized pseudo-ranges (_spr_) for the satellites seen by the receiver compute the residuals: _ph_ - _spr_ remove relative tracking biases compute the moving variance (5 epoch window) for each tracking of the same observable (e.g. L1C L1W) compute a cubic interpolation of the variance with respect to the elevation compute the weight as 1 / this interpolated index \"Clock re-alignment\" - the satellite clocks estimated by many providers have severe jumps at the end of the day. These are spanning from some centimeters to a few meters; selecting this flag goGPS will try to compensate and correct this jumps (experimental - default \"off\"). This effect is probably due to the independent estimation of the clock errors among different days. For more details see the function addClk in Core_Sky.m . Here follows an example of this jump, seen as a spike in the clock drift of a satellite (expressed in meters): The effect of this flag influences the solution near midnight GMT when two sets of old and new ephemeris connect. Removing this jump improves the smoothness of the orbits and thus the outlier detection phase that otherwise may find false-positive outliers. In the following example using different orbit providers and processing the ZIMM (Zimmerwald) station with the PPP uncombined goGPS engine we can see how the orbit of GFZ and CNES produce larger deviation in the estimated ZTD with respect to the other solutions: when the re-alignment flag is selected the solutions change showing the following behaviors: solutions computed with GFZ and CNES orbits improve, while some of the others are now worse. Use this flag carefully checking case-by-case if this adjustment improves the solution. The correction algorithm at the moment is very simple and works as follows: Take 200 epochs at the left of the file change epoch, and 200 at the right compute std of the drift of the two subsets of data if the jump is greater than the standard deviation compute a correction (correction) perform a linear interpolation of the two subsets predicting one epoch of the clock from the two sides and offset the right side to minimize the jump An offset in a satellite clock in a network solution causes no problems, while in PPP might influence the ambiguity estimation of an arc, this correction is still experimental and needs additional investigations to be applied safely. PPP corrections - This panel allows applying all the corrections needed for a Precise Point Positioning. All the corrections are applied at the end of the pre-processing phase, using fixed coordinates. Although all these corrections are not necessary for a network adjustment, applying them allows a better outlier detection. Among all the available corrections \"Atmospheric Loading\" and \"High Order Ionosphere\" are the ones with a lesser impact and can be disabled safely. The list of corrections that can be applied to the GNSS observations are: \"Receiver PCO/PCV\" - phase center offsets and variations, the magnitude of this effect depends on the antenna type \"Solid Earth Tide\" - tides due to Earth's crust movements (tens of centimeter). \"Pole Earth Tide\" - tides due to the wobbling of the Earth rotation axis (up to 2.5 cm vertical - 0.7 cm horizontal). \"Phase Wind Up\" - affect only phases due to the electromagnetic nature of circularly polarised waves, it depends on the relative orientation of satellite and receiver antennas (some centimeters). \"Shapiro Delay\" - relativistic effect (less than 2 cm). \"Ocean Loading\" - due to ocean tides deformations of the seafloor and a surface displacement of adjacent land (few centimeters). \"Atmospheric Loading\" - this effect is due to the variation of the atmospheric pressure. \"High Order Ionosphere\" - effect due to the second, and third-order due to the signal passing through the ionosphere. \"Use a-priori Iono Model\" - effect of ionosphere computed with the model selected in the Athmosphere tab , this is very useful in case of ionospheric interpolation. \"Multipath mitigation\" - with this pop-up menu the user can choose to try to mitigate multipath using previously generated multipath maps. It is possible to choose between a map based on a Zernike polynomials expansion (smoother) or the version with restored the higher frequencies of staking the residuals, see the command section Multipath management for further details. On the left the smoother solution, on the right the highest details of the staking are preserved Go back to the Index of contents","title":"Tab Pre-Processing"},{"location":"Settings/#tab-processing","text":"In the processing tab, the user can manipulate the options (PPP and Network adjustment) of the processing engines and select the output to be kept in the output container object. Coordinate estimation \"Separate antenna center for each GNSS\" - when selected goGPS internally computes different phase antenna centers for each constellation \"Additional coordinates rates\" - this function at the moment is used mostly for debugging, it allows to compute up to 3 separate coordinates sets at a different rate. To view their computed values you need to access directly to the object GNSS_Station , at the end of execution they will be in rec(rec_number).work.add_coo (for the last computed work-space) and rec(rec_number).out.add_coo (for the complete series of outputs). Generic Options \"Observation weighting\" - Select the type of observation weighting function. These are the available options: uniform - all observations equally weighted satellite elevation $sin(el)$ square of satellite elevation $sinn(el)^2$ \"Max code observation err\" - the pseudo-range observations having residuals above this threshold are excluded from the LS adjustment (this threshold works only for the uncombined engine). \"Max code observation err\" - the carrier phase observations having residuals above this threshold are excluded from the LS adjustment. Tropospheric options Estimate ZTD - when this flag is selected the Zenit Total Delay is estimated during the step of processing, it may be useful to disable this option executing a network adjustment of very short baselines. Estimate ZTD gradients - this option enables the computation of north and east tropospheric gradients. Absolute tropo in-network - activating this flag when performing a network adjustment with long base-lines the full tropospheric delay is estimated for each station. Ionosphere Options Ionosphere Management - here it is possible to select the kind of management for the ionospheric delay, this option is valid only when using the combined engine 1 - Iono-free - when selected goGPS uses the iono-free combination to process dual-frequency data. 2 - Smooth GF - when selected goGPS will use the geometry-free combination pf L1 and L2 (only these two) to compute a smooth ionospheric delay that will be removed from the observations. This is similar to using an iono-free approach but with a slightly smoother final result. 3 - External-model - when this option is selected (or only one frequency is logged by the receiver) no combinations are used, an a-priori external model should be applied (see tab pre-processing) to have reasonable results. The model to be used is set in the Atmosphere tab . PPP only Options These options are dedicated to the Precise Point Positioning adjustment. \"PPP Snooping / Reweight\" - This pop-up menu allow the user to chose different types of outlier rejection / data re-wight. The list of methods currently available is: 1 - none perform neither snooping nor reweight 2 - re-weight Huber see Table2 in G\u00f6kalp et al, 2008 - Evaluation of Different Outlier Detection Methods for GPS Networks is applied on all the observations having residuals greater than a threshold level, set to be 2 * std(residuals) 3 - re-weight Huber (no threshold) Huber M-estimator applied on all the residuals 4 - re-weight Danish see Table2 in G\u00f6kalp et al, 2008 - Evaluation of Different Outlier Detection Methods for GPS Networks is applied on all the observations having residuals greater than a threshold level, set to be 2 * std(residuals) 5 - re-weight DanishWM Modified Danish M-estimator, is applied on all the observations having residuals greater than a threshold level, set to be 2 * std(residuals) 6 - re-weight Tukey see Table2 in G\u00f6kalp et al, 2008 - Evaluation of Different Outlier Detection Methods for GPS Networks is applied on all the observations having residuals greater than a threshold level, set to be 2 * std(residuals) 7 - simple snooping all the observations having residuals greater than 2.5 * std(residuals) are removed from the adjustment 8 - smart snooping it's a method based on two threshold levels, the first one triggers the removal of the observations until its residuals re-enter below the second threshold (e.g. detection on 6 sigma0, removal of data till their residuals are below 2.5 sigma0). 9 - smart snooping + arc trim like the previous but the second threshold is lower (2 * std(residuals)), furthermore, all the arc edges having residuals greater than 2 * std(residuals) are removed \"PPP Try to fix Ambiguity (Experimental)\" - when this flag is enabled the PPP engine will try to fix ambiguities, note that this option at the moment works only with CNES orbits (they provide BIASes), receivers with precise code, and the combined engine. \"Enable PPP for receivers containing only a single frequency\" - by default goGPS does not compute any PPP solutions for single frequency receivers due to the high ionospheric errors that might be introduced. In some cases, the ionospheric delay is removed from the observations by interpolation or models and the user might want to re-enable the PPP processing. Network only Options These options are dedicated to NETWORK adjustment. \"NET Snooping / Reweight\" - Network snooping and reweight have not been fully implemented. A different strategy is applied here: the uncombined engine just disregard all the observations set above the limit for maximum phase and code residuals in the generic options (see Network.adjustNew for more details); the combined approach instead have three options: 1 - none perform neither snooping nor reweight 2 - simple 4 loops - this procedure removes outliers iteratively on residuals. At first, try to remove the worse data till the solution (in maximum 4 iterations) converges to a final adjustment (see Network.adjust for more details) 3 - 4 loops + remove bad satellites In addition to the previous approach, goGPS remove \"bad\" satellites, i.e. all the observations having residuals not having zero mean (see Network.adjust for more details) \"NET fixing approach\" - select the fixing approach to be used (remember that to use lambda3 you need to have requested the code for applying it), the current options are: 1 - none 2 - lambda3 search and shrink 3 - lambda3 integer bootstrapping 4 - lambda partial 5 - bayesian 6 - bayesian best integer equivariant 7 - sequential best integer equivariant Results to store goGPS is object-oriented, every receiver is considered a unique GNSS_Station, internally the software stores data in two objects: work , and out . Work is an object of class Receiver_Work_Space and contains the observations and everything is needed for the computation of the results of a single session, out is an object of class Receiver_Output and collects the output of a receiver for all the sessions. The results stored in the work object are pushed to out only when the PUSHOUT command is issued. The following flags select the output to be kept. Note: the data stored in out can take a lot of RAM space, this is the reason for the possibility of selecting what must be kept. \"Dt (clock errors)\" - Clock Errors \"PWV\" - Precipitable Water Vapour \"ZWD\" - Zenith Wet Delay \"ZTD\" - Zenith Total Delay \"Tropo Gradients\" - Tropospheric gradients (North, East) \"A-priori tropo\" - A-priori tropospheric delay as computed from the model \"P / T / H\" - Pressure / Temperature / Humidity \"Outliers / CS\" - Outliers and Cycle slips (per satellite to keep them small) \"Quality (SNR)\" - This is an index that might be improved in the future (per satellite to keep them small), at the moment it is storing just SNR \"Number of Sat. per Epoch\" - Number of satellites used per epoch (and by constellation) \"Azimuth / Elevation\" - Azimuth and Elevation of all the satellites in view \"Combined Residuals\" - Residuals of the processing (one per satellite) \"Uncombined Code Res.\" - Residuals of the processing for pseudo-range observations (one per observables) \"Uncombined Phase Res.\" - Residuals of the processing for carrier-phase observations (one per observables) \"Mapping functions\" - Mapping function of the troposphere (one per satellite) Output folder In this tab the folder of final storage of the results can be changed. Note that some results will be saved into sub-folders automatically created. Go back to the Index of contents","title":"Tab Processing"},{"location":"Settings/#tab-parametrization-ppp","text":"In this tab, the user can set the parametrization for the PPP processing. Note: The term regularization is use for Tykhonov regularization also know as ridge regression also know as L2 regularization, it is implemented by pseudo-observation. Coordinates The parametrization of the coordinates can be set in this panel Estimate - This tick box will determine if the coordinates are estimated or not in the adjustment. Time parametrization - This pop up let the user choose the type of time parametrization wanted, the available options are: 1 - Costant - One set of coordinates for the whole session. 2 - Epoch wise - One set of coordinates per epoch. 4 - Regular spaced constant - Sets of coordinates spaced regulary 5 - Linear spline - Linear spline 6 - Cubic spline - Cubic spline Rate - Temporal rate of the parameter.Ignored if Time parametrization set to constant Frequency parametrization - This pop up will let you choose the possible parametrization in term of frequency and tracking (Only in uncombined mode) 1 - Per tracking - One set of coordinates for each different tracking. 2 - Per frequency - One set of coordinates for each different frequency. 3 - One for all - One set of coordinates for all tracking. 4 - Per binned frequency - One set of coordinates for each different frequency (Glonass frequency binned per band). 5 - Per frequency and constellation - One set of coordinates for each frequency divided also by constellation. 6 - Per rinex band - One set of coordinates for each RINEX 3 band. Ionosphere - This panel deals with the parametrization of the ionosphere Estimate - This tick box will determine if the ionospheric parameter is estimated or not in the adjustment. Troposphere-ZTD In this panel on the left column, the ZTD parametrization can be set Estimate - This tick box will determine if the ZTD parameter is estimated or not in the adjustment. Time parametrization - This pop up can be used to choose the time parametrization: 1 - Epoch wise - One ztd paramter per epoch. 2 - Linear spline - Ztd parametrized as a linear spline. 3 - Cubic spline - Ztd parametrized as a cubic spline. Rate - Rate of ZTD spline Absolute Regularization - Absolute regularization of each ZTD paramter by means of pseudo-observation with standard deviation equal to the value of the field Differential Regularization - Regularize the difference of the paramter t+1 and t with an obervation with standard deviation equal to the value of the field (unit in m/sqrt(hour)) Troposphere-ZTD Gradients In this panel on the left column, the ZTD parametrization can be set Estimate - This tick box will determine if the ZTD gradients parameter (North and East) are estimated or not in the adjustment. Time parametrization - This pop up can be used to choose the time parametrization: 1 - Epoch wise - One set of Ztd gradients paramter per epoch. 2 - Linear spline - Ztd gradients parametrized as a linear spline. 3 - Cubic spline - Ztd gradients parametrized as a cubic spline. Rate - Rate of Ztd gradient spline Absolute Regularization - Absolute regularization of each ZTD gradient paramter by means of pseudo-observation with standard deviation equal to the value of the field Differential Regularization - Regularize the difference of the paramter t+1 and t with an obervation with standard deviation equal to the value of the field (unit in m/sqrt(hour)) Bias In this panel it is possible to parametrize the various receiver bias Separate pr ph clock - This tick box will separate clock by phase and pseudo-ange in the adjustment The possible parameters are organized in a tab, they are: Clock - Clock desynchronization Inter Frequency Bias - Bias between different frequency tracked by the receiver Inter Tracking Bias - Bias between different code tracked by the receiver The table let the user choose the parametrization with five column: Estimate - This tick box will determine if the parameter is estimated or not in the adjustment. Time parametrization - This pop up can be used to choose the time parametrization: 1 - Constant - One paramter per the whole session. 2 - Epcoh wise - One paramter per epoch 4 - Regular spaced constant - Sets of coordinates spaced regulary 5 - Linear spline - Linear spline 6 - Cubic spline - Cubic spline Rate - Rate of paramater Absolute Regularization - Absolute regularization of each ztd paramter by means of pseudo-observation with standard deviation equal to the value of the field Differential Regularization - Regularize the difference of the paramter t+1 and t with an obervation with standard deviation equal to the value of the field (unit in m/sqrt(hour))","title":"Tab Parametrization PPP"},{"location":"Settings/#tab-parametrization-network","text":"In this tab, the user can set the parametrization for the network processing. Note: The term regularization is used for Tykhonov regularization also know as ridge regression also know as L2 regularization, it is implemented by pseudo-observation. Coordinates The parametrization of the coordinates can be set in this panel Estimate - This tick box will determine if the coordinates are estimated or not in the adjustment. Time parametrization - This pop up let the user choose the type of time parametrization wanted, the available options are: 1 - Costant - One set of coordinates for the whole session. 2 - Epoch wise - One set of coordinates per epoch. 4 - Regular spaced constant - Sets of coordinates spaced regulary 5 - Linear spline - Linear spline 6 - Cubic spline - Cubic spline Rate - Temporal rate of the parameter. Ignored if Time parametrization set to constant Frequency parametrization - This pop up will let you choose the possible parametrization in term of frequency and tracking (Only in uncombined mode) 1 - Per tracking - One set of coordinates for each different tracking. 2 - Per frequency - One set of coordinates for each different frequency. 3 - One for all - One set of coordinates for all tracking. 4 - Per binned frequency - One set of coordinates for each different frequency (Glonass frequency binned per band). 5 - Per frequency and constellation - One set of coordinates for each frequency divided also by constellation. 6 - Per rinex band - One set of coordinates for each RINEX 3 band. Ionosphere - This panel deals with the parametrization of the ionosphere Estimate - This tick box will determine if the ionospheric parameter is estimated or not in the adjustment. Troposphere This panel let the user decide how to parametrize the tropospheric parameter. The two parameters are organized in a tab, they are: ZTD - Estimate a correction to the zenith tropospheric delay ZTD Gradient - Estimate north and east ZTD gradients The table let the user choose the parametrization with five column: Estimate - This tick box will determine if the parameter is estimated or not in the adjustment. Time parametrization - This pop up can be used to choose the time parametrization: 1 - Constant - One paramter per the whole session. 2 - Epcoh wise - One paramter per epoch 4 - Regular spaced constant - Sets of coordinates spaced regulary 5 - Linear spline - Linear spline 6 - Cubic spline - Cubic spline Rate - Rate of paramater Absolute Regularization - Absolute regularization of each ztd paramter by means of pseudo-observation with standard deviation equal to the value of the field Differential Regularization - Regularize the difference of the paramter t+1 and t with an obervation with standard deviation equal to the value of the field (unit in m/sqrt(hour)) Bias Receiver In this panel it is possible to parametrize the various receiver bias Separate pr ph clock - This tick box will separate clock by phase and pseudo-range in the adjustment The possible parameters are organized in a tab, they are: Clock - Clock desynchronization Inter Frequency Bias - Bias between different frequency tracked by the receiver Inter Tracking Bias - Bias between different code tracked by the receiver The table let the user choose the parametrization with 5 column: Estimate - This tick box will determine if the parameter is estimated or not in the adjustment. Time parametrization - This pop up can be used to choose the time parametrization: 1 - Constant - One paramter per the whole session. 2 - Epcoh wise - One paramter per epoch 4 - Regular spaced constant - Sets of coordinates spaced regulary 5 - Linear spline - Linear spline 6 - Cubic spline - Cubic spline Rate - Rate of paramater Absolute Regularization - Absolute regularization of each ztd paramter by means of pseudo-observation with standard deviation equal to the value of the field Differential Regularization - Regularize the difference of the paramter t+1 and t with an obervation with standard deviation equal to the value of the field (unit in m/sqrt(hour)) Bias Satellite In this panel, it is possible to parametrize the various satellite bias Separate pr ph clock - This tick box will separate clock by phase and pseudo-range in the adjustment The possible paramters are organizized in a tab, they are: Clock - Clock desyncronization Inter Frequency Bias - Bias between different frequency tracked by the receiver Inter Tracking Bias - Bias between different code tracked by the receiver The table let the user choose the parametrization with 5 column: Estimate - This tick box will determine if the parameter is estimated or not in the adjustment. Time parametrization - This pop up can be used to choose the time parametrization: 1 - Constant - One paramter per the whole session. 2 - Epcoh wise - One paramter per epoch 4 - Regular spaced constant - Sets of coordinates spaced regulary 5 - Linear spline - Linear spline 6 - Cubic spline - Cubic spline Rate - Rate of paramater Absolute Regularization - Absolute regularization of each ztd paramter by means of pseudo-observation with standard deviation equal to the value of the field Differential Regularization - Regularize the difference of the paramter t+1 and t with an obervation with standard deviation equal to the value of the field (unit in m/sqrt(hour)) Go back to the Index of contents","title":"Tab Parametrization Network"},{"location":"Settings/#tab-atmosphere","text":"This tab is used to select the options for better management of the atmospheric effects. Ionosphere options Ionosphere a-priori Model - in this pop-up menu the user can select the type of a-priori model to be removed from the observations. A good model helps the outlier-detection and pre-processing phase. The available options are: 1 - none 2 - Klobuchar - standard Klobuchar model, it requires ionospheric parameters that are usually read from broadcast orbits (goGPS can automatically fetch them) 3 - IONEX - this is the most precise model that can be applied, it is read from IONEX files, depending on the preferred type selected in the resources tab it can be a model from observed values or just a prediction. Tropospheric options Mapping function - in this pop-up menu it is possible to select the tropospheric mapping function, at the moment only 3 models are available, the additional model can be implemented into Receiver_Work_Space.getSlantMF . 1 GMF - Global Mapping Function 2 VMF gridded - Vienna Mapping Function (they are automatically downloaded when needed) 3 Neil - Niel Mapping Function Mapping function gradients - in addition to the tropospheric mapping function for estimating zenith delays, it is possible to specify the mapping function for the gradients. 1 Chen and Herring 2 MacMillan A-priori zenith delay - this is the a-priori model to be used for computing tropospheric delays, two options are available: 1 Saastamoinen from meteo data - this option makes goGPS use as a-priori model Saastamoinen, the origin of the data to be used depends on the next field in the GUI 2 VMF gridded zenith delays - these are Zenith delays coming from the Vienna gridded maps of ZTD Meteo Data - here the user can select the source of the meteorological data to be used: 1 Standard Atmosphere - Standard values of Pressure (1013.25 mbar), Temperature (18 \u00b0Celsius), Humidity (50 %) 2 GPT - 3 MET files - use the Meteorological RINEX specified in the following fields. MET files - goGPS can use meteorological RINEX files to import temperature, pressure, and humidity from meteorological stations. It automatically interpolates the data at the right elevation and at the station positions (See Meteo_Data.getVMS for more details). The syntax for these files are like Go back to the Index of contents","title":"Tab Atmosphere"},{"location":"Settings/#bottom-bar","text":"In the bottom bar, the user can find buttons to load and save the current settings and the full path of the current .ini file in use. And the button \" go! \" to start execution. Go back to the Index of contents","title":"Bottom Bar"}]}